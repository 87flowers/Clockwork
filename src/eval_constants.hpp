#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(288, 449);
inline const PParam KNIGHT_MAT = S(999, 991);
inline const PParam BISHOP_MAT = S(1020, 1066);
inline const PParam ROOK_MAT   = S(1521, 1787);
inline const PParam QUEEN_MAT  = S(3351, 3245);
inline const PParam TEMPO_VAL  = S(27, 17);

inline const PParam BISHOP_PAIR_VAL     = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL    = S(-52, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-72, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(-2, 21), S(55, 26), S(81, 71), S(187, 148), S(542, 536), S(1765, 1474),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(48, 21), S(52, 36), S(98, 109), S(629, -123),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(4, 0), S(-20, 33), S(-25, 81), S(44, 131), S(73, 232), S(42, 30),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-203, -177), S(-93, -131), S(-41, -36), S(7, -10), S(54, 11), S(72, 54), S(105, 50), S(127, 48), S(181, -36),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-120, -298), S(-70, -193), S(-10, -125), S(4, -69), S(41, -37), S(55, -15), S(77, -4), S(84, 8), S(90, 17), S(92, 14), S(122, 0), S(165, -48), S(202, -54), S(261, -74),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-208, -309), S(-78, -112), S(-29, -37), S(-8, -44), S(2, -5), S(18, 13), S(37, 18), S(63, 15), S(87, 26), S(117, 31), S(142, 32), S(155, 37), S(199, 23), S(191, 21), S(281, -66),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(64, 100), S(-640, 512), S(-230, -379), S(-150, -249), S(-120, -211), S(-72, -200), S(-106, -10), S(-85, -42), S(-70, -5), S(-69, 20), S(-55, 31), S(-55, 66), S(-33, 51), S(-20, 50), S(-13, 56), S(2, 45), S(-12, 66), S(14, 24), S(23, 21), S(60, -41), S(98, -81), S(115, -135), S(238, -234), S(415, -395), S(395, -420), S(945, -693), S(730, -649), S(1355, -975),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(415, 813), S(81, 446), S(17, 487), S(18, 514), S(1, 503), S(-24, 487), S(-2, 491), S(7, 460), S(56, 338),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -36), S(154, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(20, 3), S(130, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -62), S(84, -78), S(134, -76), S(137, -122),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-51, 34), S(-72, 52), S(12, -28), S(175, -122), S(452, -290),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-118, 487),   S(13, 500),     S(178, 427),    S(341, 208),    S(278, 230),    S(301, 314),    S(175, 364),    S(218, 354),    //
    S(12, -2),      S(189, 20),     S(121, -62),    S(150, -163),   S(76, -165),    S(23, -89),     S(-27, -7),     S(-56, -10),    //
    S(-46, -66),    S(-19, -64),    S(-27, -107),   S(-30, -142),   S(-45, -141),   S(-91, -139),   S(-106, -66),   S(-133, -44),   //
    S(-39, -143),   S(-12, -107),   S(-48, -150),   S(-47, -153),   S(-68, -163),   S(-100, -140),  S(-139, -70),   S(-158, -88),   //
    S(-34, -176),   S(32, -172),    S(-28, -132),   S(-89, -119),   S(-79, -141),   S(-132, -136),  S(-138, -108),  S(-173, -108),  //
    S(-29, -178),   S(128, -176),   S(45, -136),    S(-56, -95),    S(-75, -148),   S(-98, -130),   S(-114, -86),   S(-152, -103),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-440, -137),  S(-108, -57),   S(-526, 314),   S(-8, 52),      S(-355, 166),   S(-337, 173),   S(-447, 10),    S(-586, 81),    //
    S(97, -18),     S(121, 57),     S(300, -90),    S(77, 73),      S(153, 28),     S(113, -6),     S(-7, 25),      S(49, -43),     //
    S(48, 26),      S(42, 112),     S(249, 55),     S(144, 94),     S(202, 45),     S(67, 66),      S(83, 20),      S(-52, 10),     //
    S(125, 46),     S(38, 102),     S(98, 102),     S(73, 123),     S(93, 79),      S(83, 86),      S(7, 28),       S(22, 45),      //
    S(93, 24),      S(106, 33),     S(81, 81),      S(48, 69),      S(48, 84),      S(56, 87),      S(16, 25),      S(34, -65),     //
    S(-4, -25),     S(32, -32),     S(12, -20),     S(37, 50),      S(56, 47),      S(-28, 1),      S(-16, -12),    S(-67, -12),    //
    S(17, 81),      S(48, -31),     S(3, -20),      S(-5, 6),       S(-12, 0),      S(-27, -35),    S(-15, -60),    S(-116, -113),  //
    S(-34, -19),    S(5, -21),      S(61, -102),    S(40, -28),     S(72, -43),     S(15, -149),    S(-42, -50),    S(-156, -65),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-73, 104),    S(-53, 25),     S(-564, 129),   S(-251, 113),   S(-312, 135),   S(-355, 130),   S(-4, 72),      S(-36, 57),     //
    S(31, -48),     S(51, 60),      S(42, 53),      S(95, -3),      S(62, 23),      S(27, 51),      S(29, 32),      S(-56, 53),     //
    S(17, 75),      S(79, 72),      S(294, 29),     S(154, 28),     S(108, 38),     S(45, 82),      S(144, 30),     S(-5, 93),      //
    S(20, 26),      S(62, 60),      S(147, 37),     S(149, 47),     S(152, 56),     S(67, 76),      S(73, 38),      S(-30, 57),     //
    S(38, -23),     S(42, 40),      S(52, 43),      S(104, 50),     S(106, 83),     S(25, 77),      S(47, 8),       S(38, -58),     //
    S(72, -33),     S(103, 3),      S(104, 5),      S(27, 57),      S(24, 64),      S(17, 73),      S(77, 8),       S(51, -51),     //
    S(29, -52),     S(103, -23),    S(49, -21),     S(26, 23),      S(18, -8),      S(57, -29),     S(-2, 15),      S(75, -112),    //
    S(59, -17),     S(21, 3),       S(17, 14),      S(20, -39),     S(4, -36),      S(26, 1),       S(41, -69),     S(-43, 14),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(122, 33),     S(175, 45),     S(118, 76),     S(76, 97),      S(112, 60),     S(71, 57),      S(89, 60),      S(99, 60),      //
    S(127, 75),     S(176, 68),     S(239, 49),     S(168, 94),     S(156, 96),     S(75, 110),     S(41, 107),     S(62, 96),      //
    S(48, 74),      S(293, 18),     S(250, 25),     S(274, 0),      S(172, 44),     S(85, 74),      S(141, 42),     S(-9, 92),      //
    S(15, 53),      S(58, 55),      S(80, 50),      S(125, -5),     S(91, 28),      S(33, 80),      S(9, 76),       S(-66, 68),     //
    S(-117, 18),    S(0, 12),       S(-10, 27),     S(-16, 31),     S(-13, 20),     S(-49, 80),     S(-97, 81),     S(-116, 57),    //
    S(-110, 7),     S(1, -72),      S(-18, -31),    S(-58, -8),     S(-19, -34),    S(-113, 31),    S(-107, 10),    S(-106, -5),    //
    S(-169, 22),    S(-84, -41),    S(-34, -53),    S(-31, -38),    S(-50, -19),    S(-57, -21),    S(-113, -31),   S(-116, -31),   //
    S(-122, 5),     S(-94, 15),     S(-49, -24),    S(-13, -39),    S(-26, -20),    S(-35, -24),    S(-52, -38),    S(-79, -18),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(67, 76),      S(59, 71),      S(113, 43),     S(-106, 245),   S(-4, 125),     S(-52, 149),    S(46, 44),      S(-1, 21),      //
    S(94, 55),      S(-76, 247),    S(-57, 316),    S(-119, 301),   S(-89, 241),    S(-143, 266),   S(-62, 136),    S(-6, 25),      //
    S(-32, 179),    S(94, 161),     S(54, 200),     S(-28, 276),    S(-19, 190),    S(-83, 226),    S(17, 98),      S(-7, 10),      //
    S(49, 78),      S(21, 160),     S(26, 174),     S(-3, 236),     S(-13, 213),    S(-8, 133),     S(3, 55),       S(-18, 46),     //
    S(31, 96),      S(48, 76),      S(29, 122),     S(-5, 178),     S(-20, 182),    S(-21, 139),    S(-16, 42),     S(-10, -29),    //
    S(62, -148),    S(59, -26),     S(39, 61),      S(-38, 125),    S(10, 45),      S(-5, 63),      S(29, -58),     S(-2, -56),     //
    S(69, -280),    S(40, -306),    S(21, -122),    S(41, -42),     S(-3, 1),       S(55, -139),    S(29, -44),     S(-12, -40),    //
    S(-84, -67),    S(-94, -323),   S(-17, -304),   S(15, -205),    S(44, -119),    S(69, -221),    S(51, -177),    S(-2, -80),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(462, -724),   S(243, -117),   S(35, -40),     S(-83, 33),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(368, -171),   S(56, 123),     S(-51, 154),    S(332, 56),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(3, 34),       S(117, 155),    S(170, 117),    S(274, 43),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-237, 66),    S(0, 121),      S(139, 116),    S(119, 75),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-199, 3),     S(-35, 74),     S(22, 80),      S(-27, 123),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-143, -36),   S(61, -6),      S(-47, 64),     S(-92, 108),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(74, -117),    S(109, -44),    S(-8, 25),      S(-125, 87),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-36, -180),   S(67, -137),    S(-65, -94),    S(-33, -123),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
