#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(294, 451);
inline const PParam KNIGHT_MAT = S(1003, 978);
inline const PParam BISHOP_MAT = S(1040, 1068);
inline const PParam ROOK_MAT   = S(1535, 1786);
inline const PParam QUEEN_MAT  = S(3373, 3238);
inline const PParam TEMPO_VAL  = S(27, 17);

inline const PParam BISHOP_PAIR_VAL     = S(78, 194);
inline const PParam DOUBLED_PAWN_VAL    = S(-52, -78);
inline const PParam ROOKS_CONNECTED_VAL = S(0, 20);

inline const PParam POTENTIAL_CHECKER_VAL = S(-72, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(-2, 21), S(55, 26), S(81, 71), S(187, 148), S(564, 525), S(1604, 1557),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(48, 21), S(52, 36), S(98, 109), S(622, -120),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(5, 0), S(-20, 32), S(-25, 81), S(44, 131), S(73, 232), S(47, 32),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-204, -167), S(-93, -124), S(-40, -28), S(8, -3), S(55, 18), S(73, 61), S(106, 57), S(128, 55), S(182, -29),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-129, -298), S(-80, -192), S(-19, -125), S(-4, -69), S(32, -37), S(46, -15), S(68, -4), S(75, 8), S(81, 17), S(83, 14), S(113, 0), S(156, -48), S(190, -52), S(247, -72),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-214, -308), S(-83, -110), S(-36, -36), S(-14, -44), S(-3, -6), S(12, 11), S(31, 16), S(56, 14), S(81, 25), S(111, 30), S(136, 32), S(148, 36), S(193, 23), S(185, 22), S(276, -65),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(28, 82), S(-611, 382), S(-235, -370), S(-159, -238), S(-127, -208), S(-78, -202), S(-111, -10), S(-91, -42), S(-75, -6), S(-75, 20), S(-60, 30), S(-60, 65), S(-38, 51), S(-25, 50), S(-19, 56), S(-2, 44), S(-17, 65), S(9, 23), S(19, 20), S(55, -41), S(93, -82), S(111, -137), S(240, -240), S(408, -395), S(401, -428), S(939, -694), S(723, -642), S(1513, -1072),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(425, 816), S(81, 444), S(17, 485), S(17, 512), S(0, 502), S(-25, 485), S(-4, 490), S(6, 459), S(54, 337),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -36), S(154, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(19, 3), S(130, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -63), S(84, -78), S(133, -77), S(133, -122),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-51, 34), S(-72, 53), S(12, -27), S(175, -122), S(453, -292),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-127, 481),   S(7, 493),      S(168, 423),    S(329, 204),    S(267, 225),    S(292, 309),    S(164, 361),    S(208, 349),    //
    S(7, -4),       S(184, 17),     S(116, -64),    S(145, -165),   S(71, -167),    S(18, -91),     S(-33, -9),     S(-62, -12),    //
    S(-52, -68),    S(-25, -65),    S(-32, -109),   S(-35, -144),   S(-51, -142),   S(-97, -140),   S(-111, -68),   S(-139, -46),   //
    S(-44, -144),   S(-17, -109),   S(-53, -152),   S(-53, -155),   S(-73, -165),   S(-105, -142),  S(-145, -72),   S(-164, -90),   //
    S(-40, -178),   S(27, -174),    S(-33, -134),   S(-94, -121),   S(-84, -143),   S(-138, -138),  S(-143, -110),  S(-178, -110),  //
    S(-35, -180),   S(122, -177),   S(40, -138),    S(-61, -97),    S(-80, -150),   S(-104, -132),  S(-120, -88),   S(-158, -104),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-447, -126),  S(-132, -40),   S(-529, 320),   S(-14, 60),     S(-359, 172),   S(-335, 176),   S(-473, 23),    S(-597, 98),    //
    S(97, -15),     S(121, 60),     S(300, -86),    S(75, 77),      S(152, 33),     S(111, -1),     S(-8, 29),      S(47, -38),     //
    S(47, 30),      S(40, 116),     S(247, 60),     S(142, 99),     S(200, 50),     S(65, 71),      S(81, 24),      S(-53, 15),     //
    S(123, 50),     S(36, 106),     S(97, 106),     S(71, 128),     S(91, 84),      S(80, 91),      S(6, 32),       S(20, 49),      //
    S(91, 29),      S(105, 37),     S(80, 86),      S(47, 73),      S(47, 89),      S(54, 91),      S(14, 30),      S(32, -61),     //
    S(-5, -21),     S(30, -27),     S(10, -15),     S(35, 55),      S(55, 52),      S(-29, 6),      S(-18, -7),     S(-68, -8),     //
    S(15, 86),      S(46, -26),     S(2, -15),      S(-6, 11),      S(-14, 4),      S(-29, -30),    S(-17, -55),    S(-114, -115),  //
    S(-27, -25),    S(3, -15),      S(60, -98),     S(38, -23),     S(71, -38),     S(14, -144),    S(-44, -43),    S(-158, -62),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-76, 97),     S(-58, 20),     S(-578, 128),   S(-250, 106),   S(-318, 130),   S(-355, 124),   S(-15, 70),     S(-48, 56),     //
    S(22, -52),     S(42, 56),      S(33, 49),      S(86, -7),      S(54, 18),      S(17, 47),      S(20, 28),      S(-65, 48),     //
    S(9, 71),       S(71, 68),      S(286, 25),     S(146, 24),     S(100, 34),     S(36, 78),      S(136, 26),     S(-13, 89),     //
    S(11, 22),      S(53, 56),      S(138, 33),     S(141, 43),     S(144, 51),     S(59, 72),      S(64, 34),      S(-39, 53),     //
    S(30, -27),     S(34, 36),      S(43, 39),      S(96, 46),      S(98, 78),      S(17, 73),      S(39, 3),       S(30, -62),     //
    S(64, -37),     S(95, 0),       S(95, 1),       S(18, 53),      S(16, 60),      S(9, 69),       S(69, 4),       S(42, -55),     //
    S(21, -57),     S(95, -27),     S(41, -25),     S(17, 19),      S(9, -12),      S(49, -33),     S(-10, 11),     S(67, -117),    //
    S(50, -21),     S(16, -2),      S(9, 11),       S(12, -43),     S(-3, -40),     S(18, 0),       S(33, -72),     S(-52, 10),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(116, 31),     S(172, 42),     S(117, 72),     S(73, 94),      S(108, 57),     S(67, 54),      S(86, 56),      S(96, 57),      //
    S(123, 72),     S(172, 65),     S(235, 45),     S(164, 90),     S(151, 93),     S(70, 107),     S(37, 104),     S(58, 93),      //
    S(44, 72),      S(290, 15),     S(247, 22),     S(270, -3),     S(168, 41),     S(80, 71),      S(137, 39),     S(-13, 89),     //
    S(12, 51),      S(54, 53),      S(76, 48),      S(121, -8),     S(87, 25),      S(29, 78),      S(5, 74),       S(-71, 66),     //
    S(-121, 16),    S(-3, 10),      S(-14, 25),     S(-20, 28),     S(-17, 18),     S(-53, 77),     S(-101, 79),    S(-120, 55),    //
    S(-114, 5),     S(-2, -73),     S(-23, -32),    S(-62, -10),    S(-23, -36),    S(-117, 29),    S(-111, 9),     S(-110, -7),    //
    S(-172, 20),    S(-88, -43),    S(-38, -55),    S(-35, -40),    S(-54, -21),    S(-61, -24),    S(-117, -33),   S(-121, -33),   //
    S(-127, 2),     S(-100, 11),    S(-54, -29),    S(-19, -44),    S(-32, -25),    S(-40, -29),    S(-58, -42),    S(-85, -23),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(66, 73),      S(60, 67),      S(115, 38),     S(-110, 244),   S(-9, 126),     S(-55, 148),    S(49, 38),      S(-2, 18),      //
    S(93, 51),      S(-79, 245),    S(-60, 315),    S(-123, 302),   S(-91, 240),    S(-147, 266),   S(-64, 134),    S(-8, 24),      //
    S(-34, 175),    S(92, 159),     S(52, 197),     S(-31, 276),    S(-21, 189),    S(-86, 225),    S(14, 97),      S(-10, 8),      //
    S(46, 77),      S(18, 159),     S(23, 173),     S(-6, 235),     S(-16, 212),    S(-11, 132),    S(0, 53),       S(-21, 45),     //
    S(28, 96),      S(45, 75),      S(26, 121),     S(-8, 177),     S(-23, 181),    S(-24, 137),    S(-19, 41),     S(-13, -30),    //
    S(58, -147),    S(56, -27),     S(37, 60),      S(-41, 125),    S(7, 44),       S(-8, 62),      S(26, -60),     S(-4, -58),     //
    S(67, -283),    S(36, -304),    S(18, -123),    S(38, -43),     S(-6, 0),       S(53, -140),    S(26, -46),     S(-15, -41),    //
    S(-85, -72),    S(-98, -323),   S(-22, -302),   S(12, -207),    S(41, -119),    S(66, -222),    S(49, -181),    S(-7, -79),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(462, -714),   S(233, -112),   S(55, -44),     S(-56, 27),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(372, -172),   S(72, 119),     S(-38, 152),    S(337, 55),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(18, 31),      S(123, 154),    S(184, 114),    S(284, 41),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-231, 65),    S(7, 120),      S(151, 114),    S(132, 73),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-192, 2),     S(-27, 73),     S(29, 79),      S(-18, 121),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-136, -37),   S(69, -7),      S(-39, 63),     S(-84, 106),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(82, -118),    S(117, -45),    S(0, 24),       S(-117, 86),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-28, -181),   S(76, -138),    S(-57, -95),    S(-24, -122),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
