#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(277, 527);
inline const PScore KNIGHT_MAT = S(831, 1007);
inline const PScore BISHOP_MAT = S(866, 1099);
inline const PScore ROOK_MAT   = S(1257, 1805);
inline const PScore QUEEN_MAT  = S(2787, 3255);
inline const PScore TEMPO_VAL  = S(29, 14);

inline const PScore BISHOP_PAIR_VAL  = S(57, 206);
inline const PScore DOUBLED_PAWN_VAL = S(-77, -119);

inline const PScore KNIGHT_POTENTIAL_CHECKER_VAL = S(-66, 18);
inline const PScore BISHOP_POTENTIAL_CHECKER_VAL = S(-51, -24);
inline const PScore ROOK_POTENTIAL_CHECKER_VAL   = S(-124, 17);
inline const PScore QUEEN_POTENTIAL_CHECKER_VAL  = S(-66, -18);

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-231, -228), S(-135, -138), S(-87, -38), S(-41, -1), S(3, 18), S(24, 68), S(54, 71), S(87, 65), S(134, -8),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-186, -273), S(-125, -180), S(-70, -135), S(-50, -75), S(-10, -37), S(7, -14), S(33, -10), S(43, 0), S(50, 18), S(50, 9), S(65, 8), S(171, -66), S(188, -104), S(281, -160),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-263, -388), S(-93, -96), S(-53, -34), S(-38, -21), S(-20, -1), S(-8, 6), S(9, 24), S(39, 15), S(67, 18), S(88, 36), S(114, 27), S(123, 37), S(167, 25), S(124, 42), S(237, -65),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-86, 24), S(-421, 145), S(-188, -432), S(-187, -91), S(-110, -338), S(-108, -226), S(-135, -27), S(-105, -54), S(-94, -33), S(-84, -3), S(-88, 40), S(-80, 66), S(-52, 49), S(-45, 53), S(-27, 38), S(-30, 58), S(-39, 87), S(-25, 56), S(-7, 23), S(26, -19), S(77, -85), S(140, -161), S(147, -159), S(431, -472), S(352, -460), S(989, -759), S(653, -544), S(1562, -1176),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(359, 674), S(104, 430), S(16, 482), S(19, 510), S(-1, 501), S(-16, 478), S(-26, 491), S(-15, 466), S(83, 340),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(85, -40), S(148, -93),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(42, -20), S(131, -46),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(59, -57), S(61, -72), S(110, -69), S(138, -113),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 42), S(-46, 14), S(34, -71), S(222, -190), S(361, -291),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-155, 456),   S(48, 418),     S(115, 443),    S(304, 188),    S(238, 214),    S(258, 333),    S(131, 344),    S(198, 331),    //
    S(-46, 108),    S(141, 163),    S(99, 60),      S(195, -4),     S(128, -12),    S(33, 47),      S(-28, 99),     S(-80, 46),     //
    S(-69, -61),    S(-41, -48),    S(-32, -101),   S(-31, -137),   S(-33, -120),   S(-85, -123),   S(-107, -58),   S(-152, -36),   //
    S(-57, -164),   S(-12, -123),   S(-43, -172),   S(-51, -164),   S(-59, -179),   S(-96, -167),   S(-130, -90),   S(-173, -104),  //
    S(-20, -199),   S(64, -187),    S(-8, -163),    S(-70, -136),   S(-71, -153),   S(-124, -151),  S(-117, -113),  S(-171, -127),  //
    S(-61, -199),   S(109, -201),   S(18, -166),    S(-74, -110),   S(-92, -157),   S(-124, -146),  S(-128, -99),   S(-175, -120),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-297, -161),  S(5, -113),     S(-514, 267),   S(-7, 74),      S(-230, 140),   S(-294, 176),   S(-232, -67),   S(-386, 9),     //
    S(93, -69),     S(63, 91),      S(218, -28),    S(39, 65),      S(103, 93),     S(135, -43),    S(-3, -9),      S(63, -66),     //
    S(0, 74),       S(21, 144),     S(198, 106),    S(141, 84),     S(127, 93),     S(35, 82),      S(20, 78),      S(-73, 48),     //
    S(106, 34),     S(5, 112),      S(65, 127),     S(39, 127),     S(63, 116),     S(53, 84),      S(-23, 48),     S(-2, 65),      //
    S(63, 38),      S(85, 55),      S(62, 62),      S(23, 81),      S(20, 85),      S(27, 79),      S(-24, 70),     S(0, -35),      //
    S(-30, 4),      S(4, -23),      S(-14, -32),    S(11, 45),      S(23, 40),      S(-71, 5),      S(-51, -11),    S(-87, -17),    //
    S(34, 25),      S(8, 10),       S(-51, 0),      S(-33, 18),     S(-36, -8),     S(-76, -16),    S(-51, -38),    S(-101, -117),  //
    S(-95, 42),     S(-9, -44),     S(13, -77),     S(36, -45),     S(38, -43),     S(-30, -129),   S(-64, -23),    S(-212, 3),     //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-143, 58),    S(-32, -1),     S(-552, 109),   S(-300, 100),   S(-318, 122),   S(-496, 126),   S(-56, 91),     S(12, 56),      //
    S(-37, -20),    S(-26, 78),     S(29, 34),      S(32, -16),     S(-4, 41),      S(3, 40),       S(19, 23),      S(-87, 23),     //
    S(-16, 71),     S(20, 66),      S(235, 36),     S(101, 33),     S(64, 46),      S(3, 72),       S(118, 0),      S(4, 46),       //
    S(20, -16),     S(16, 44),      S(81, 29),      S(86, 65),      S(119, 39),     S(31, 55),      S(20, 42),      S(-75, 78),     //
    S(36, -53),     S(11, 20),      S(34, 12),      S(52, 48),      S(42, 82),      S(0, 45),       S(-8, 3),       S(-13, -52),    //
    S(48, -14),     S(84, -30),     S(82, -24),     S(0, 43),       S(-4, 51),      S(-22, 68),     S(52, -25),     S(20, -47),     //
    S(-5, -52),     S(85, -50),     S(21, -28),     S(-3, 3),       S(-16, -12),    S(24, -25),     S(-16, -6),     S(35, -116),    //
    S(-9, 49),      S(-16, 8),      S(-24, 29),     S(-8, -47),     S(-31, -41),    S(0, -5),       S(20, -83),     S(-60, 24),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(67, 25),      S(292, -1),     S(14, 87),      S(67, 65),      S(73, 59),      S(23, 69),      S(74, 48),      S(65, 61),      //
    S(124, 39),     S(123, 65),     S(217, 39),     S(98, 108),     S(123, 89),     S(32, 116),     S(-14, 118),    S(22, 105),     //
    S(-36, 89),     S(245, 3),      S(164, 38),     S(165, 33),     S(103, 36),     S(16, 101),     S(59, 66),      S(-48, 87),     //
    S(-41, 71),     S(-28, 70),     S(36, 54),      S(95, -5),      S(56, 15),      S(5, 97),       S(-12, 66),     S(-103, 86),    //
    S(-110, -23),   S(11, -32),     S(-58, 40),     S(-40, 21),     S(-59, 26),     S(-85, 75),     S(-130, 64),    S(-130, 53),    //
    S(-101, -50),   S(-3, -111),    S(-56, -29),    S(-78, -18),    S(-47, -43),    S(-127, 29),    S(-142, 16),    S(-152, 11),    //
    S(-144, 7),     S(-93, -79),    S(-55, -63),    S(-46, -50),    S(-50, -41),    S(-73, -23),    S(-130, -36),   S(-140, -48),   //
    S(-121, -18),   S(-97, 0),      S(-61, -34),    S(-35, -45),    S(-49, -19),    S(-54, -27),    S(-74, -39),    S(-93, -27),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(20, 55),      S(54, 0),       S(-13, 161),    S(-28, 146),    S(16, 84),      S(-69, 180),    S(57, 13),      S(-56, 37),     //
    S(64, 107),     S(-157, 286),   S(-56, 292),    S(-249, 419),   S(-157, 289),   S(-175, 288),   S(-95, 128),    S(-32, 76),     //
    S(-75, 209),    S(30, 187),     S(29, 216),     S(-11, 227),    S(-104, 265),   S(-96, 219),    S(-20, 87),     S(-35, 46),     //
    S(41, 34),      S(15, 147),     S(-15, 136),    S(-52, 241),    S(-45, 219),    S(4, 68),       S(-12, 44),     S(-34, 42),     //
    S(22, 53),      S(64, 23),      S(-4, 158),     S(-27, 148),    S(-62, 186),    S(-38, 117),    S(6, -42),      S(-22, -41),    //
    S(70, -142),    S(39, -16),     S(31, 36),      S(-45, 88),     S(-6, 19),      S(0, -2),       S(15, -54),     S(-16, -10),    //
    S(35, -212),    S(41, -300),    S(18, -150),    S(44, -66),     S(-2, -27),     S(31, -136),    S(26, -112),    S(-30, -16),    //
    S(-65, -66),    S(-34, -385),   S(-18, -269),   S(12, -231),    S(41, -139),    S(40, -182),    S(1, -121),     S(-66, 7),      //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(524, -602),   S(405, -182),   S(-476, 157),   S(-482, 153),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(286, -97),    S(-153, 191),   S(-92, 214),    S(29, 185),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-161, 76),    S(48, 141),     S(130, 124),    S(29, 103),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-233, 60),    S(-94, 158),    S(106, 108),    S(23, 92),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-220, -6),    S(-78, 81),     S(37, 66),      S(-98, 124),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-150, -52),   S(60, -19),     S(-29, 39),     S(-90, 98),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(83, -133),    S(139, -67),    S(29, 1),       S(-87, 69),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(5, -214),     S(94, -157),    S(-34, -102),   S(-4, -131),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
