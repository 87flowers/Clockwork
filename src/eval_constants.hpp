#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(295, 456);
inline const PParam KNIGHT_MAT = S(1006, 982);
inline const PParam BISHOP_MAT = S(1041, 1072);
inline const PParam ROOK_MAT   = S(1538, 1795);
inline const PParam QUEEN_MAT  = S(3381, 3253);
inline const PParam TEMPO_VAL  = S(26, 17);

inline const PParam BISHOP_PAIR_VAL     = S(76, 195);
inline const PParam DOUBLED_PAWN_VAL    = S(-52, -82);

inline const PParam POTENTIAL_CHECKER_VAL = S(-72, -3);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(-3, 21), S(53, 26), S(85, 69), S(185, 150), S(569, 522), S(1602, 1557),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 43), S(48, 20), S(54, 34), S(106, 104), S(616, -127),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(3, 3), S(-18, 28), S(-22, 78), S(43, 129), S(67, 235), S(51, 31),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-193, -158), S(-93, -112), S(-45, -29), S(6, -5), S(53, 16), S(71, 60), S(105, 55), S(127, 52), S(188, -40),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-121, -303), S(-72, -199), S(-14, -130), S(0, -69), S(34, -39), S(48, -15), S(71, -7), S(74, 12), S(76, 20), S(85, 12), S(104, 1), S(150, -50), S(169, -55), S(239, -68),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-219, -312), S(-78, -111), S(-36, -31), S(-18, -42), S(-5, -2), S(9, 14), S(29, 17), S(54, 14), S(79, 24), S(109, 31), S(133, 31), S(146, 38), S(193, 23), S(182, 21), S(292, -73),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(28, 82), S(-615, 382), S(-212, -367), S(-164, -232), S(-126, -201), S(-67, -225), S(-119, -7), S(-101, -31), S(-82, -4), S(-78, 20), S(-61, 23), S(-61, 55), S(-38, 44), S(-30, 57), S(-26, 62), S(-6, 46), S(-19, 68), S(1, 29), S(21, 20), S(37, -29), S(100, -94), S(121, -135), S(252, -244), S(406, -395), S(395, -442), S(937, -701), S(728, -637), S(1518, -1086),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(430, 820), S(91, 426), S(14, 483), S(13, 516), S(-2, 506), S(-28, 485), S(-10, 493), S(8, 457), S(55, 337),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(82, -31), S(155, -88),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(23, 3), S(131, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -66), S(85, -81), S(130, -76), S(120, -117),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-52, 30), S(-76, 55), S(11, -27), S(171, -122), S(461, -299),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-124, 488),   S(35, 481),     S(157, 427),    S(328, 203),    S(269, 208),    S(305, 299),    S(144, 379),    S(198, 359),    //
    S(7, -11),      S(187, 14),     S(106, -64),    S(154, -178),   S(75, -169),    S(19, -90),     S(-21, -18),    S(-70, -10),    //
    S(-54, -67),    S(-33, -65),    S(-34, -111),   S(-38, -144),   S(-54, -146),   S(-98, -139),   S(-110, -74),   S(-141, -49),   //
    S(-50, -143),   S(-20, -111),   S(-55, -152),   S(-55, -154),   S(-76, -167),   S(-109, -143),  S(-148, -73),   S(-166, -92),   //
    S(-43, -176),   S(24, -174),    S(-32, -138),   S(-94, -120),   S(-86, -144),   S(-139, -139),  S(-148, -106),  S(-183, -107),  //
    S(-37, -180),   S(121, -177),   S(39, -142),    S(-57, -106),   S(-85, -157),   S(-104, -134),  S(-122, -88),   S(-161, -107),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-464, -134),  S(-135, -41),   S(-530, 321),   S(-17, 75),     S(-367, 166),   S(-325, 190),   S(-479, 16),    S(-620, 104),   //
    S(114, -7),     S(119, 45),     S(311, -93),    S(71, 68),      S(146, 28),     S(116, -10),    S(-21, 15),     S(43, -38),     //
    S(75, 39),      S(36, 121),     S(239, 81),     S(153, 86),     S(202, 47),     S(48, 87),      S(85, 34),      S(-56, 13),     //
    S(125, 48),     S(31, 108),     S(99, 105),     S(74, 127),     S(91, 86),      S(81, 86),      S(0, 35),       S(32, 50),      //
    S(85, 34),      S(112, 30),     S(77, 92),      S(47, 76),      S(43, 91),      S(56, 93),      S(25, 18),      S(29, -65),     //
    S(5, -20),      S(25, -23),     S(7, -10),      S(29, 67),      S(51, 54),      S(-29, 6),      S(-16, -8),     S(-69, -9),     //
    S(24, 81),      S(29, -7),      S(8, -17),      S(-9, 13),      S(-16, 4),      S(-46, -17),    S(-5, -68),     S(-109, -146),  //
    S(-26, -34),    S(-2, -5),      S(71, -114),    S(41, -26),     S(73, -45),     S(13, -160),    S(-45, -50),    S(-166, -70),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-64, 104),    S(-54, 25),     S(-588, 119),   S(-237, 92),    S(-312, 139),   S(-352, 115),   S(-18, 90),     S(-64, 69),     //
    S(14, -51),     S(13, 67),      S(27, 48),      S(80, -3),      S(42, 9),       S(27, 52),      S(22, 26),      S(-48, 32),     //
    S(8, 70),       S(94, 48),      S(299, 9),      S(149, 24),     S(108, 30),     S(30, 84),      S(127, 23),     S(-8, 80),      //
    S(1, 21),       S(49, 62),      S(133, 33),     S(138, 41),     S(146, 52),     S(62, 64),      S(65, 32),      S(-23, 35),     //
    S(30, -25),     S(28, 45),      S(39, 45),      S(101, 40),     S(98, 83),      S(17, 72),      S(48, -10),     S(5, -49),      //
    S(58, -30),     S(96, -6),      S(98, 0),       S(18, 53),      S(12, 61),      S(7, 65),       S(60, 17),      S(34, -52),     //
    S(41, -68),     S(93, -27),     S(35, -24),     S(14, 26),      S(7, -10),      S(56, -39),     S(-11, 11),     S(72, -134),    //
    S(53, -16),     S(30, 2),       S(-1, 20),      S(2, -40),      S(-9, -30),     S(15, 0),       S(46, -82),     S(-55, 9),      //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(98, 36),      S(166, 30),     S(129, 60),     S(77, 94),      S(103, 57),     S(65, 61),      S(75, 63),      S(97, 59),      //
    S(109, 78),     S(177, 64),     S(232, 45),     S(166, 92),     S(140, 96),     S(63, 115),     S(32, 108),     S(44, 102),     //
    S(47, 81),      S(294, 8),      S(252, 26),     S(276, -5),     S(164, 49),     S(76, 73),      S(139, 40),     S(-3, 76),      //
    S(10, 51),      S(31, 64),      S(65, 50),      S(114, -7),     S(84, 29),      S(22, 84),      S(3, 76),       S(-71, 68),     //
    S(-125, 14),    S(-4, 6),       S(-15, 20),     S(-19, 30),     S(-23, 26),     S(-53, 72),     S(-101, 78),    S(-116, 53),    //
    S(-117, -1),    S(4, -91),      S(-27, -34),    S(-52, -18),    S(-24, -38),    S(-113, 23),    S(-101, 0),     S(-125, 0),     //
    S(-172, 15),    S(-106, -41),   S(-41, -46),    S(-34, -44),    S(-42, -31),    S(-52, -32),    S(-118, -37),   S(-113, -48),   //
    S(-124, -1),    S(-101, 14),    S(-53, -26),    S(-16, -43),    S(-25, -27),    S(-37, -29),    S(-59, -42),    S(-81, -25),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(50, 60),      S(60, 63),      S(103, 25),     S(-114, 246),   S(-15, 131),    S(-61, 147),    S(52, 30),      S(-2, 13),      //
    S(86, 35),      S(-91, 242),    S(-72, 323),    S(-131, 316),   S(-100, 237),   S(-167, 288),   S(-55, 120),    S(-1, 15),      //
    S(-22, 157),    S(102, 170),    S(67, 173),     S(-48, 292),    S(-15, 181),    S(-76, 213),    S(24, 90),      S(-7, 3),       //
    S(62, 47),      S(5, 183),      S(34, 179),     S(-8, 243),     S(-4, 193),     S(-15, 129),    S(-2, 48),      S(-19, 58),     //
    S(19, 111),     S(42, 89),      S(15, 141),     S(-8, 179),     S(-26, 189),    S(-24, 136),    S(-18, 37),     S(-17, -21),    //
    S(44, -127),    S(55, -40),     S(43, 43),      S(-43, 122),    S(5, 38),       S(-4, 54),      S(18, -38),     S(-1, -75),     //
    S(62, -285),    S(36, -293),    S(14, -108),    S(33, -34),     S(-1, -11),     S(54, -138),    S(40, -78),     S(-19, -39),    //
    S(-75, -70),    S(-103, -329),  S(-21, -291),   S(-2, -196),    S(41, -113),    S(63, -218),    S(65, -187),    S(-18, -69),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(469, -695),   S(228, -124),   S(51, -47),     S(-60, 26),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(373, -167),   S(75, 118),     S(-40, 154),    S(331, 56),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(20, 21),      S(119, 160),    S(189, 111),    S(282, 34),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-235, 68),    S(-10, 130),    S(164, 113),    S(147, 68),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-202, 0),     S(-24, 68),     S(33, 82),      S(0, 118),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-140, -31),   S(70, -9),      S(-43, 61),     S(-72, 101),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(78, -120),    S(108, -43),    S(-7, 22),      S(-119, 82),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-33, -178),   S(72, -143),    S(-65, -97),    S(-27, -130),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
