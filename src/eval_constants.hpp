#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(287, 450);
inline const PParam KNIGHT_MAT = S(992, 998);
inline const PParam BISHOP_MAT = S(1008, 1059);
inline const PParam ROOK_MAT   = S(1518, 1806);
inline const PParam QUEEN_MAT  = S(3315, 3289);
inline const PParam TEMPO_VAL  = S(34, 16);

inline const PParam BISHOP_PAIR_VAL  = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL = S(-49, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(54, 25), S(80, 71), S(184, 150), S(508, 555), S(1770, 1457),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(49, 21), S(55, 36), S(100, 110), S(636, -124),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(4, 0), S(-20, 33), S(-27, 82), S(44, 131), S(72, 233), S(34, 34),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-208, -173), S(-98, -128), S(-42, -33), S(8, -7), S(56, 13), S(76, 56), S(110, 52), S(133, 51), S(187, -33),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-114, -286), S(-66, -182), S(-5, -115), S(7, -58), S(44, -27), S(59, -4), S(81, 5), S(87, 18), S(92, 27), S(94, 25), S(123, 9), S(165, -38), S(201, -44), S(261, -64),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-200, -322), S(-85, -116), S(-37, -40), S(-15, -48), S(-3, -8), S(11, 10), S(30, 14), S(56, 12), S(81, 23), S(110, 28), S(135, 29), S(148, 34), S(192, 20), S(184, 19), S(275, -69),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(68, 102), S(-634, 539), S(-225, -396), S(-155, -249), S(-122, -220), S(-74, -209), S(-110, -14), S(-90, -42), S(-75, -7), S(-74, 18), S(-61, 30), S(-61, 66), S(-39, 51), S(-27, 51), S(-20, 56), S(-3, 44), S(-18, 65), S(7, 23), S(18, 20), S(54, -41), S(90, -80), S(106, -135), S(230, -234), S(411, -399), S(390, -422), S(943, -698), S(724, -649), S(1364, -985),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(391, 815), S(79, 443), S(16, 484), S(17, 511), S(0, 500), S(-27, 483), S(-5, 488), S(4, 456), S(52, 334),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -37), S(157, -90),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(18, 3), S(126, -39),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(66, -63), S(84, -78), S(134, -77), S(135, -122),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-50, 33), S(-73, 52), S(9, -27), S(168, -119), S(441, -284),
};

inline const PParam PAWN_THREAT_KNIGHT = S(179, 74);
inline const PParam PAWN_THREAT_BISHOP = S(162, 65);
inline const PParam PAWN_THREAT_ROOK   = S(136, 52);
inline const PParam PAWN_THREAT_QUEEN  = S(109, -56);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-117, 490),   S(5, 504),      S(171, 431),    S(332, 210),    S(272, 232),    S(295, 316),    S(167, 370),    S(220, 355),    //
    S(10, 0),       S(184, 23),     S(115, -58),    S(144, -160),   S(70, -162),    S(18, -86),     S(-29, -5),     S(-56, -9),     //
    S(-49, -64),    S(-26, -60),    S(-31, -105),   S(-37, -138),   S(-53, -137),   S(-96, -136),   S(-111, -63),   S(-136, -42),   //
    S(-39, -142),   S(-17, -104),   S(-50, -149),   S(-50, -152),   S(-70, -162),   S(-101, -139),  S(-143, -69),   S(-158, -87),   //
    S(-36, -175),   S(30, -170),    S(-30, -130),   S(-89, -117),   S(-80, -139),   S(-133, -135),  S(-138, -107),  S(-174, -107),  //
    S(-29, -177),   S(125, -174),   S(44, -135),    S(-56, -94),    S(-75, -146),   S(-99, -128),   S(-115, -85),   S(-152, -102),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-431, -147),  S(-97, -64),    S(-539, 319),   S(-16, 53),     S(-362, 167),   S(-346, 176),   S(-433, 2),     S(-584, 70),    //
    S(93, -17),     S(120, 57),     S(293, -88),    S(66, 76),      S(145, 31),     S(108, -5),     S(-11, 26),     S(44, -41),     //
    S(49, 26),      S(41, 113),     S(244, 57),     S(139, 96),     S(194, 48),     S(63, 67),      S(82, 19),      S(-50, 9),      //
    S(126, 47),     S(44, 103),     S(101, 102),    S(69, 126),     S(90, 81),      S(81, 87),      S(11, 29),      S(23, 44),      //
    S(93, 25),      S(112, 34),     S(82, 83),      S(49, 70),      S(49, 85),      S(57, 87),      S(18, 27),      S(35, -65),     //
    S(-4, -24),     S(31, -31),     S(9, -19),      S(34, 51),      S(53, 49),      S(-30, 1),      S(-19, -11),    S(-67, -12),    //
    S(17, 81),      S(48, -29),     S(0, -19),      S(-9, 7),       S(-16, 0),      S(-31, -34),    S(-15, -59),    S(-116, -111),  //
    S(-38, -17),    S(3, -20),      S(62, -104),    S(37, -27),     S(70, -43),     S(12, -148),    S(-44, -48),    S(-159, -61),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-79, 112),    S(-56, 33),     S(-566, 137),   S(-261, 124),   S(-317, 143),   S(-366, 141),   S(-2, 79),      S(-35, 61),     //
    S(28, -39),     S(56, 66),      S(41, 60),      S(97, 2),       S(64, 29),      S(28, 57),      S(31, 38),      S(-54, 58),     //
    S(33, 76),      S(90, 76),      S(306, 33),     S(159, 35),     S(113, 44),     S(53, 87),      S(150, 36),     S(5, 95),       //
    S(29, 31),      S(75, 65),      S(158, 42),     S(158, 53),     S(159, 62),     S(75, 82),      S(82, 43),      S(-25, 63),     //
    S(40, -16),     S(48, 48),      S(58, 50),      S(111, 57),     S(113, 89),     S(31, 84),      S(52, 15),      S(42, -52),     //
    S(74, -28),     S(105, 10),     S(107, 12),     S(29, 64),      S(26, 72),      S(20, 80),      S(79, 16),      S(52, -45),     //
    S(30, -47),     S(105, -17),    S(53, -15),     S(26, 30),      S(18, -1),      S(58, -22),     S(-1, 21),      S(75, -107),    //
    S(63, -11),     S(26, 9),       S(16, 22),      S(21, -32),     S(4, -29),      S(25, 8),       S(40, -63),     S(-41, 20),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(121, 32),     S(172, 44),     S(114, 76),     S(74, 96),      S(111, 58),     S(70, 56),      S(88, 58),      S(96, 59),      //
    S(123, 74),     S(175, 66),     S(238, 47),     S(166, 93),     S(153, 95),     S(72, 109),     S(40, 105),     S(62, 95),      //
    S(48, 72),      S(294, 16),     S(252, 22),     S(273, -2),     S(172, 42),     S(83, 73),      S(141, 40),     S(-9, 90),      //
    S(17, 51),      S(62, 52),      S(84, 48),      S(126, -7),     S(92, 26),      S(35, 79),      S(12, 74),      S(-66, 66),     //
    S(-118, 16),    S(6, 9),        S(-7, 25),      S(-13, 28),     S(-10, 17),     S(-47, 78),     S(-93, 78),     S(-115, 54),    //
    S(-109, 4),     S(5, -75),      S(-17, -33),    S(-55, -11),    S(-18, -36),    S(-111, 28),    S(-104, 7),     S(-105, -7),    //
    S(-167, 19),    S(-82, -44),    S(-34, -55),    S(-31, -40),    S(-49, -21),    S(-57, -23),    S(-112, -33),   S(-114, -35),   //
    S(-122, 2),     S(-94, 12),     S(-50, -26),    S(-14, -41),    S(-27, -23),    S(-35, -27),    S(-52, -40),    S(-81, -22),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(65, 80),      S(57, 74),      S(105, 53),     S(-100, 241),   S(-3, 126),     S(-55, 153),    S(42, 48),      S(-4, 26),      //
    S(95, 56),      S(-77, 249),    S(-60, 323),    S(-119, 305),   S(-88, 243),    S(-144, 270),   S(-62, 139),    S(-4, 25),      //
    S(-34, 183),    S(95, 164),     S(51, 205),     S(-28, 279),    S(-19, 193),    S(-82, 228),    S(15, 102),     S(-6, 11),      //
    S(50, 80),      S(24, 161),     S(28, 175),     S(-2, 239),     S(-14, 217),    S(-7, 135),     S(7, 53),       S(-18, 47),     //
    S(30, 99),      S(51, 76),      S(29, 126),     S(-5, 182),     S(-19, 184),    S(-21, 142),    S(-17, 44),     S(-11, -28),    //
    S(58, -138),    S(60, -24),     S(39, 64),      S(-38, 128),    S(9, 48),       S(-5, 64),      S(29, -59),     S(-1, -56),     //
    S(62, -266),    S(41, -304),    S(22, -121),    S(39, -38),     S(-5, 4),       S(54, -135),    S(28, -41),     S(-13, -38),    //
    S(-88, -61),    S(-84, -332),   S(-23, -296),   S(12, -202),    S(42, -116),    S(68, -221),    S(48, -171),    S(-5, -76),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(470, -733),   S(257, -119),   S(12, -33),     S(-112, 41),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(370, -170),   S(51, 127),     S(-47, 156),    S(322, 60),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(3, 36),       S(123, 157),    S(172, 119),    S(273, 46),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-228, 66),    S(8, 122),      S(146, 117),    S(127, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-189, 3),     S(-25, 74),     S(31, 80),      S(-18, 123),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-135, -36),   S(72, -6),      S(-35, 63),     S(-81, 107),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(84, -118),    S(120, -45),    S(3, 25),       S(-114, 87),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-27, -181),   S(76, -139),    S(-55, -95),    S(-24, -124),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
