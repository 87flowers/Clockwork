#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(296, 397);
inline const PParam KNIGHT_MAT = S(1071, 955);
inline const PParam BISHOP_MAT = S(1068, 1027);
inline const PParam ROOK_MAT   = S(1593, 1705);
inline const PParam QUEEN_MAT  = S(3599, 3046);
inline const PParam TEMPO_VAL  = S(58, 16);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam DOUBLED_PAWN_VAL = S(-34, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -1);

inline const PParam SAFE_SPACE_VAL   = S(-4, 3);
inline const PParam DANGER_SPACE_VAL = S(-1, -8);
inline const PParam OWN_SPACE_VAL    = S(21, 8);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(16, 21), S(54, 33), S(77, 68), S(195, 137), S(488, 284), S(1173, 1046),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(59, 46), S(57, 28), S(64, 59), S(144, 124), S(648, -72),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-58, -2), S(-44, 12), S(-15, 83), S(51, 160), S(90, 290), S(218, 86),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(46, -43), S(28, -1), S(11, 28), S(17, 71), S(82, 153), S(169, 273),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(15, -39), S(-2, 5), S(-21, -17), S(-21, -43), S(-41, -84), S(-218, -140),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(8, 40), S(-34, 45), S(-24, -7), S(-12, -35), S(-7, -30), S(21, -35), S(1, -48),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-168, -92), S(32, -50), S(-8, -8), S(10, 24), S(16, 48), S(40, 46), S(-9, 68),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-199, -267), S(-94, -99), S(-36, -50), S(8, -16), S(57, -1), S(85, 39), S(122, 35), S(157, 29), S(209, -40),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-142, -362), S(-68, -169), S(16, -102), S(47, -58), S(77, -24), S(97, -7), S(113, 1), S(128, 5), S(138, 12), S(146, 0), S(167, -17), S(220, -68), S(246, -85), S(304, -126),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-208, -385), S(-115, -136), S(-61, -62), S(-24, -45), S(4, -18), S(26, 0), S(48, 7), S(79, 7), S(104, 16), S(133, 25), S(162, 23), S(178, 28), S(216, 21), S(234, 5), S(373, -118),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-355, 67), S(-288, -794), S(-196, -660), S(-149, -446), S(-123, -263), S(-88, -172), S(-88, -37), S(-61, -41), S(-51, 0), S(-39, 20), S(-31, 44), S(-25, 63), S(-9, 61), S(2, 62), S(8, 65), S(26, 52), S(21, 60), S(33, 44), S(56, 11), S(84, -31), S(109, -65), S(143, -133), S(201, -172), S(361, -344), S(331, -351), S(769, -596), S(542, -525), S(1244, -887),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(436, 561), S(143, 385), S(45, 468), S(32, 502), S(9, 496), S(-27, 496), S(-3, 490), S(-10, 471), S(-8, 401),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -31), S(153, -77),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(37, -4), S(143, -43),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(70, -45), S(70, -69), S(113, -72), S(142, -133),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-38, 29), S(-57, 41), S(-2, -7), S(149, -91), S(347, -234),
};

inline const PParam PAWN_THREAT_KNIGHT = S(214, 68);
inline const PParam PAWN_THREAT_BISHOP = S(191, 102);
inline const PParam PAWN_THREAT_ROOK   = S(184, 48);
inline const PParam PAWN_THREAT_QUEEN  = S(152, -52);

inline const PParam KNIGHT_THREAT_BISHOP = S(99, 70);
inline const PParam KNIGHT_THREAT_ROOK   = S(239, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(151, -72);

inline const PParam BISHOP_THREAT_KNIGHT = S(106, 24);
inline const PParam BISHOP_THREAT_ROOK   = S(235, 51);
inline const PParam BISHOP_THREAT_QUEEN  = S(187, 50);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-5, -11), S(-7, -4), S(-7, -13), S(-11, -23), S(-17, -28), S(-22, -32), S(-22, -38), S(-29, -36), S(-37, -48),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(192, 397),    S(215, 440),    S(259, 413),    S(319, 289),    S(242, 300),    S(246, 360),    S(151, 378),    S(194, 348),    //
    S(43, -22),     S(173, -7),     S(148, -65),    S(150, -132),   S(104, -145),   S(54, -93),     S(13, -46),     S(-49, -36),    //
    S(-17, -63),    S(9, -69),      S(28, -109),    S(11, -133),    S(-1, -138),    S(-40, -125),   S(-86, -78),    S(-116, -49),   //
    S(-26, -117),   S(-5, -95),     S(-24, -141),   S(-36, -147),   S(-56, -157),   S(-86, -133),   S(-123, -74),   S(-143, -80),   //
    S(-41, -146),   S(26, -143),    S(-37, -110),   S(-69, -105),   S(-84, -116),   S(-126, -117),  S(-125, -95),   S(-158, -99),   //
    S(-33, -142),   S(100, -139),   S(41, -115),    S(-18, -96),    S(-54, -109),   S(-88, -111),   S(-98, -76),    S(-135, -91),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-396, -95),   S(-325, 43),    S(-408, 231),   S(-134, 89),    S(-282, 113),   S(-366, 135),   S(-557, 76),    S(-518, 19),    //
    S(-1, 7),       S(80, 21),      S(175, -46),    S(120, 24),     S(123, 27),     S(54, 0),       S(4, 14),       S(-26, -26),    //
    S(65, -11),     S(111, 40),     S(195, 37),     S(151, 51),     S(161, 39),     S(67, 50),      S(68, 21),      S(-28, 24),     //
    S(103, 25),     S(90, 54),      S(119, 63),     S(115, 85),     S(121, 70),     S(76, 76),      S(43, 25),      S(33, 21),      //
    S(101, 8),      S(120, 8),      S(89, 32),      S(78, 37),      S(67, 49),      S(54, 50),      S(49, 23),      S(40, -41),     //
    S(12, -12),     S(29, -24),     S(14, -19),     S(23, 28),      S(30, 25),      S(-29, 2),      S(-2, -30),     S(-41, -32),    //
    S(5, 7),        S(40, -21),     S(-3, -26),     S(-3, -10),     S(-17, -19),    S(-44, -36),    S(-1, -38),     S(-68, -113),   //
    S(-33, -51),    S(10, -23),     S(27, -35),     S(38, -27),     S(32, -17),     S(-13, -51),    S(-33, -34),    S(-85, -72),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-130, 95),    S(-149, 63),    S(-377, 92),    S(-291, 121),   S(-219, 117),   S(-400, 144),   S(-108, 113),   S(-78, 95),     //
    S(45, -11),     S(39, 62),      S(39, 54),      S(44, 38),      S(26, 50),      S(38, 54),      S(14, 51),      S(-23, 42),     //
    S(63, 50),      S(132, 51),     S(237, 47),     S(154, 45),     S(139, 46),     S(103, 66),     S(155, 37),     S(27, 53),      //
    S(80, 0),       S(87, 63),      S(144, 54),     S(159, 78),     S(164, 78),     S(93, 77),      S(67, 58),      S(14, 42),      //
    S(80, -20),     S(106, 18),     S(91, 39),      S(101, 58),     S(91, 80),      S(45, 68),      S(51, 30),      S(35, -26),     //
    S(96, -30),     S(143, 0),      S(130, 2),      S(64, 45),      S(49, 53),      S(43, 53),      S(99, 11),      S(66, -29),     //
    S(85, -66),     S(129, -36),    S(87, -35),     S(57, 0),       S(47, -19),     S(46, -24),     S(43, -7),      S(70, -73),     //
    S(83, -45),     S(74, 0),       S(80, 0),       S(97, -30),     S(106, -37),    S(95, -5),      S(88, -27),     S(62, -24),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(144, 48),     S(209, 46),     S(132, 74),     S(138, 71),     S(160, 50),     S(106, 64),     S(113, 72),     S(123, 76),     //
    S(81, 92),      S(168, 67),     S(234, 46),     S(180, 81),     S(189, 71),     S(140, 79),     S(85, 98),      S(61, 110),     //
    S(64, 70),      S(206, 36),     S(250, 17),     S(273, 9),      S(229, 18),     S(145, 59),     S(153, 52),     S(31, 106),     //
    S(15, 64),      S(88, 54),      S(128, 46),     S(174, 0),      S(142, 25),     S(71, 77),      S(42, 79),      S(-31, 89),     //
    S(-55, 23),     S(24, 28),      S(6, 28),       S(5, 25),       S(2, 18),       S(-27, 67),     S(-42, 73),     S(-62, 61),     //
    S(-83, 0),      S(-11, -23),    S(-24, -12),    S(-43, -4),     S(-20, -27),    S(-72, 23),     S(-62, 21),     S(-82, 15),     //
    S(-129, 7),     S(-38, -42),    S(-31, -40),    S(-20, -40),    S(-25, -38),    S(-45, -23),    S(-47, -33),    S(-85, -19),    //
    S(-107, 10),    S(-69, 16),     S(-21, -17),    S(12, -35),     S(3, -22),      S(-7, -16),     S(-34, -19),    S(-65, -1),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(55, 87),      S(80, 57),      S(79, 70),      S(-37, 203),    S(46, 107),     S(-26, 147),    S(46, 49),      S(0, 69),       //
    S(43, 128),     S(-31, 217),    S(-29, 270),    S(-97, 289),    S(-77, 238),    S(-106, 254),   S(-45, 149),    S(-14, 82),     //
    S(-2, 158),     S(88, 156),     S(42, 223),     S(34, 221),     S(-5, 205),     S(-57, 222),    S(18, 113),     S(-22, 81),     //
    S(50, 81),      S(45, 163),     S(22, 185),     S(27, 237),     S(0, 222),      S(-6, 154),     S(9, 83),       S(4, 38),       //
    S(19, 111),     S(58, 67),      S(19, 122),     S(-7, 167),     S(-27, 160),    S(-23, 117),    S(-3, 58),      S(-1, 10),      //
    S(36, -70),     S(53, -10),     S(38, 45),      S(-17, 81),     S(2, 26),       S(4, 31),       S(27, -22),     S(4, -9),       //
    S(19, -164),    S(53, -275),    S(20, -137),    S(36, -63),     S(7, -44),      S(27, -121),    S(25, -49),     S(14, -56),     //
    S(-30, -87),    S(39, -352),    S(37, -344),    S(70, -254),    S(66, -168),    S(74, -212),    S(50, -162),    S(-5, -82),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-90, -423),   S(131, -55),    S(-57, 14),     S(-147, 46),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(212, -130),   S(-1, 138),     S(12, 134),     S(156, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-49, 48),     S(80, 131),     S(94, 110),     S(98, 65),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-274, 78),    S(40, 93),      S(33, 95),      S(-22, 74),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-228, 27),    S(-43, 68),     S(-34, 59),     S(-113, 95),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-147, 0),     S(54, 11),      S(-50, 52),     S(-89, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(79, -91),     S(130, -27),    S(23, 8),       S(-50, 51),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-46, -127),   S(93, -112),    S(6, -80),      S(-14, -73),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
