#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(284, 391);
inline const PParam KNIGHT_MAT = S(1090, 966);
inline const PParam BISHOP_MAT = S(1075, 1026);
inline const PParam ROOK_MAT   = S(1593, 1709);
inline const PParam QUEEN_MAT  = S(3603, 3028);
inline const PParam TEMPO_VAL  = S(60, 20);

inline const PParam BISHOP_PAIR_VAL  = S(80, 178);
inline const PParam DOUBLED_PAWN_VAL = S(-33, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(16, 20), S(55, 31), S(76, 68), S(197, 135), S(503, 276), S(970, 1176),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(57, 43), S(52, 27), S(54, 53), S(136, 117), S(648, -80),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-49, 18), S(-35, 32), S(-5, 103), S(60, 180), S(97, 311), S(254, 110),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(47, -42), S(28, 0), S(10, 30), S(16, 72), S(83, 154), S(177, 270),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(13, -38), S(-3, 6), S(-26, -15), S(-24, -42), S(-42, -85), S(-221, -139),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(10, 33), S(-30, 37), S(-21, -14), S(-9, -43), S(-3, -37), S(25, -43), S(5, -55),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-176, -107), S(19, -64), S(-19, -20), S(0, 10), S(4, 36), S(28, 34), S(-22, 56),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-207, -295), S(-102, -127), S(-46, -77), S(-3, -43), S(40, -25), S(63, 15), S(96, 13), S(126, 8), S(173, -55),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-138, -372), S(-62, -180), S(19, -112), S(50, -69), S(77, -34), S(97, -17), S(112, -8), S(126, -2), S(137, 3), S(145, -6), S(166, -24), S(221, -73), S(249, -90), S(305, -129),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-212, -393), S(-115, -144), S(-61, -70), S(-24, -54), S(4, -28), S(26, -9), S(49, 0), S(79, 0), S(105, 8), S(132, 18), S(161, 17), S(177, 22), S(214, 14), S(234, -1), S(376, -127),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-433, 71), S(-274, -774), S(-177, -660), S(-131, -437), S(-105, -249), S(-70, -164), S(-71, -24), S(-45, -25), S(-36, 18), S(-25, 40), S(-17, 65), S(-11, 84), S(4, 83), S(16, 83), S(22, 87), S(40, 73), S(35, 84), S(49, 65), S(72, 32), S(100, -10), S(126, -43), S(157, -107), S(214, -145), S(385, -327), S(362, -341), S(774, -567), S(562, -499), S(1182, -826),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(462, 591), S(178, 397), S(79, 483), S(67, 518), S(44, 514), S(8, 515), S(31, 510), S(24, 492), S(27, 423),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(94, -33), S(166, -77),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(40, -2), S(143, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -44), S(68, -69), S(112, -71), S(144, -134),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-38, 30), S(-58, 41), S(0, -9), S(149, -91), S(342, -231),
};

inline const PParam PAWN_THREAT_KNIGHT = S(237, 65);
inline const PParam PAWN_THREAT_BISHOP = S(199, 113);
inline const PParam PAWN_THREAT_ROOK   = S(192, 57);
inline const PParam PAWN_THREAT_QUEEN  = S(165, -48);

inline const std::array<PParam, 2> KNIGHT_THREAT_PAWN = {
    S(15, 92), S(-40, 15),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_KNIGHT = {
    S(-13, -49), S(-76, -21),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_BISHOP = {
    S(166, 48), S(87, 69),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_ROOK = {
    S(285, -45), S(209, 44),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_QUEEN = {
    S(165, -106), S(143, -41),
};

inline const std::array<PParam, 2> BISHOP_THREAT_PAWN = {
    S(42, 76), S(-8, -3),
};
inline const std::array<PParam, 2> BISHOP_THREAT_KNIGHT = {
    S(197, 39), S(101, 23),
};
inline const std::array<PParam, 2> BISHOP_THREAT_BISHOP = {
    S(18, 10), S(-16, -8),
};
inline const std::array<PParam, 2> BISHOP_THREAT_ROOK = {
    S(234, -5), S(216, 142),
};
inline const std::array<PParam, 2> BISHOP_THREAT_QUEEN = {
    S(210, -18), S(169, 141),
};

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-6, -11), S(-7, -4), S(-7, -13), S(-11, -23), S(-18, -27), S(-24, -31), S(-26, -38), S(-33, -35), S(-43, -46),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(183, 401),    S(200, 447),    S(243, 420),    S(304, 294),    S(234, 304),    S(227, 369),    S(141, 380),    S(185, 352),    //
    S(59, -15),     S(188, 11),     S(162, -47),    S(167, -105),   S(120, -116),   S(67, -73),     S(29, -26),     S(-33, -26),    //
    S(-1, -53),     S(26, -50),     S(42, -92),     S(20, -104),    S(8, -109),     S(-26, -107),   S(-69, -59),    S(-101, -38),   //
    S(-11, -109),   S(9, -79),      S(9, -116),     S(-6, -111),    S(-26, -121),   S(-53, -108),   S(-110, -56),   S(-130, -72),   //
    S(-27, -138),   S(39, -135),    S(-4, -94),     S(-37, -87),    S(-52, -99),    S(-95, -99),    S(-114, -86),   S(-145, -91),   //
    S(-19, -136),   S(114, -132),   S(75, -100),    S(15, -81),     S(-21, -93),    S(-54, -95),    S(-86, -68),    S(-122, -82),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-399, -78),   S(-327, 52),    S(-401, 222),   S(-123, 88),    S(-280, 115),   S(-354, 131),   S(-553, 75),    S(-526, 34),    //
    S(-3, 21),      S(83, 23),      S(187, -48),    S(122, 26),     S(132, 24),     S(67, -2),      S(6, 19),       S(-29, -14),    //
    S(68, -7),      S(117, 44),     S(219, 24),     S(175, 40),     S(188, 26),     S(91, 36),      S(73, 26),      S(-27, 30),     //
    S(110, 29),     S(114, 44),     S(149, 51),     S(144, 74),     S(146, 61),     S(105, 62),     S(63, 16),      S(40, 23),      //
    S(107, 14),     S(134, 8),      S(140, 30),     S(119, 42),     S(109, 55),     S(102, 48),     S(60, 24),      S(43, -34),     //
    S(15, -4),      S(40, -22),     S(53, -11),     S(60, 38),      S(69, 34),      S(10, 10),      S(7, -25),      S(-41, -19),    //
    S(2, 18),       S(37, -8),      S(23, -9),      S(20, 7),       S(9, -2),       S(-18, -17),    S(-4, -26),     S(-72, -101),   //
    S(-41, -31),    S(4, -6),       S(22, -21),     S(31, -11),     S(27, -3),      S(-19, -37),    S(-43, -17),    S(-93, -54),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-136, 103),   S(-164, 67),    S(-381, 92),    S(-300, 120),   S(-226, 118),   S(-413, 144),   S(-116, 112),   S(-82, 100),    //
    S(40, -3),      S(29, 63),      S(33, 51),      S(32, 41),      S(19, 49),      S(31, 53),      S(3, 54),       S(-27, 52),     //
    S(60, 57),      S(121, 53),     S(226, 50),     S(139, 51),     S(123, 52),     S(92, 69),      S(142, 41),     S(23, 60),      //
    S(75, 6),       S(80, 68),      S(135, 56),     S(149, 79),     S(152, 80),     S(81, 79),      S(58, 63),      S(8, 47),       //
    S(75, -12),     S(97, 24),      S(105, 52),     S(112, 68),     S(102, 89),     S(58, 80),      S(41, 37),      S(26, -14),     //
    S(88, -21),     S(137, 5),      S(144, 14),     S(78, 58),      S(61, 66),      S(59, 65),      S(90, 17),      S(59, -23),     //
    S(79, -58),     S(124, -30),    S(102, -22),    S(75, 11),      S(67, -9),      S(63, -12),     S(39, -1),      S(64, -66),     //
    S(75, -34),     S(67, 7),       S(73, 7),       S(90, -23),     S(98, -30),     S(89, 1),       S(80, -20),     S(55, -16),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(157, 47),     S(221, 45),     S(137, 78),     S(142, 74),     S(164, 52),     S(109, 68),     S(122, 74),     S(137, 73),     //
    S(86, 96),      S(172, 72),     S(235, 51),     S(179, 86),     S(187, 77),     S(135, 86),     S(89, 101),     S(66, 113),     //
    S(68, 73),      S(209, 38),     S(247, 24),     S(267, 16),     S(221, 26),     S(139, 68),     S(156, 54),     S(36, 108),     //
    S(20, 65),      S(90, 57),      S(130, 49),     S(171, 5),      S(135, 32),     S(66, 85),      S(45, 81),      S(-25, 90),     //
    S(-51, 24),     S(31, 28),      S(25, 41),      S(25, 39),      S(21, 32),      S(-8, 78),      S(-38, 75),     S(-60, 64),     //
    S(-79, 3),      S(-5, -22),     S(-3, 2),       S(-21, 8),      S(1, -14),      S(-50, 35),     S(-59, 25),     S(-79, 19),     //
    S(-123, 9),     S(-34, -37),    S(-9, -28),     S(3, -29),      S(-3, -25),     S(-22, -11),    S(-42, -30),    S(-83, -14),    //
    S(-101, 14),    S(-62, 20),     S(-15, -13),    S(17, -30),     S(8, -18),      S(-4, -11),     S(-27, -16),    S(-59, 0),      //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(57, 73),      S(73, 49),      S(72, 61),      S(-51, 199),    S(38, 98),      S(-40, 142),    S(40, 47),      S(2, 58),       //
    S(40, 117),     S(-38, 210),    S(-46, 267),    S(-121, 294),   S(-101, 241),   S(-123, 253),   S(-59, 146),    S(-20, 76),     //
    S(-6, 153),     S(75, 153),     S(23, 221),     S(2, 227),      S(-33, 210),    S(-79, 222),    S(3, 113),      S(-27, 73),     //
    S(43, 74),      S(31, 161),     S(1, 184),      S(2, 234),      S(-25, 222),    S(-26, 151),    S(-3, 79),      S(-5, 33),      //
    S(14, 105),     S(50, 59),      S(24, 126),     S(-6, 173),     S(-27, 166),    S(-21, 122),    S(-17, 56),     S(-8, 3),       //
    S(29, -74),     S(47, -18),     S(47, 47),      S(-8, 82),      S(9, 27),       S(11, 34),      S(17, -32),     S(-3, -15),     //
    S(17, -177),    S(49, -284),    S(34, -139),    S(51, -66),     S(22, -46),     S(41, -123),    S(17, -55),     S(7, -61),      //
    S(-33, -90),    S(36, -354),    S(34, -353),    S(66, -262),    S(61, -177),    S(68, -220),    S(46, -168),    S(-9, -88),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-105, -402),  S(158, -44),    S(-35, 28),     S(-116, 52),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(251, -124),   S(29, 145),     S(44, 143),     S(183, 85),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-17, 55),     S(108, 141),    S(128, 118),    S(118, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-242, 86),    S(65, 104),     S(59, 106),     S(-1, 87),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-200, 38),    S(-17, 78),     S(10, 79),      S(-77, 120),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-120, 11),    S(75, 22),      S(-10, 74),     S(-54, 100),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(103, -79),    S(152, -17),    S(64, 28),      S(-11, 72),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-21, -115),   S(114, -100),   S(25, -67),     S(3, -59),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on
}
