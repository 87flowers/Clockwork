#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(289, 452);
inline const PParam KNIGHT_MAT = S(998, 995);
inline const PParam BISHOP_MAT = S(1012, 1072);
inline const PParam ROOK_MAT   = S(1520, 1798);
inline const PParam QUEEN_MAT  = S(3331, 3269);
inline const PParam TEMPO_VAL  = S(27, 17);

inline const PParam BISHOP_PAIR_VAL     = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL    = S(-52, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-72, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(-1, 21), S(55, 26), S(81, 71), S(186, 149), S(528, 546), S(1760, 1474),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(48, 21), S(52, 36), S(98, 110), S(632, -125),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(4, 0), S(-20, 33), S(-25, 81), S(44, 131), S(73, 233), S(42, 28),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-206, -177), S(-97, -130), S(-45, -35), S(3, -10), S(50, 11), S(69, 54), S(101, 50), S(124, 48), S(177, -35),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-117, -299), S(-68, -194), S(-7, -126), S(6, -69), S(43, -38), S(57, -15), S(79, -4), S(86, 7), S(92, 16), S(94, 14), S(124, -1), S(167, -49), S(203, -54), S(262, -74),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-212, -313), S(-83, -115), S(-34, -40), S(-13, -47), S(-2, -8), S(13, 10), S(32, 15), S(58, 13), S(82, 23), S(112, 28), S(137, 29), S(149, 34), S(193, 20), S(186, 18), S(276, -69),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(64, 100), S(-637, 519), S(-231, -388), S(-157, -239), S(-123, -215), S(-76, -201), S(-110, -11), S(-89, -42), S(-73, -6), S(-73, 19), S(-59, 30), S(-58, 65), S(-37, 50), S(-24, 49), S(-17, 55), S(-1, 44), S(-16, 64), S(10, 22), S(20, 19), S(57, -42), S(95, -83), S(111, -136), S(233, -235), S(413, -398), S(388, -420), S(947, -699), S(726, -650), S(1375, -989),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(411, 810), S(81, 447), S(17, 487), S(18, 514), S(1, 503), S(-23, 486), S(-2, 491), S(8, 459), S(57, 337),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -36), S(154, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(20, 3), S(130, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -63), S(84, -78), S(134, -77), S(138, -122),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-51, 34), S(-72, 52), S(12, -27), S(174, -121), S(448, -287),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-121, 490),   S(10, 502),     S(174, 430),    S(338, 210),    S(275, 231),    S(298, 315),    S(172, 366),    S(215, 356),    //
    S(11, -4),      S(187, 18),     S(120, -64),    S(149, -165),   S(75, -168),    S(22, -91),     S(-28, -9),     S(-58, -12),    //
    S(-48, -68),    S(-21, -65),    S(-28, -109),   S(-31, -144),   S(-47, -143),   S(-92, -141),   S(-107, -68),   S(-135, -46),   //
    S(-40, -145),   S(-14, -109),   S(-49, -152),   S(-49, -155),   S(-69, -165),   S(-101, -142),  S(-141, -72),   S(-160, -90),   //
    S(-36, -178),   S(31, -173),    S(-30, -134),   S(-90, -121),   S(-81, -143),   S(-134, -138),  S(-139, -110),  S(-174, -111),  //
    S(-30, -180),   S(126, -177),   S(43, -138),    S(-57, -97),    S(-76, -150),   S(-100, -132),  S(-116, -88),   S(-154, -105),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-433, -143),  S(-98, -60),    S(-531, 318),   S(-12, 56),     S(-351, 164),   S(-337, 175),   S(-430, 1),     S(-580, 75),    //
    S(97, -18),     S(121, 58),     S(299, -88),    S(75, 75),      S(151, 30),     S(112, -4),     S(-7, 26),      S(49, -42),     //
    S(46, 28),      S(40, 114),     S(247, 58),     S(142, 97),     S(201, 47),     S(66, 68),      S(82, 21),      S(-52, 11),     //
    S(124, 47),     S(36, 103),     S(97, 104),     S(71, 126),     S(92, 81),      S(81, 88),      S(6, 30),       S(21, 46),      //
    S(92, 26),      S(105, 34),     S(80, 83),      S(47, 70),      S(47, 86),      S(55, 88),      S(15, 27),      S(33, -64),     //
    S(-4, -24),     S(31, -30),     S(11, -18),     S(36, 52),      S(55, 49),      S(-28, 2),      S(-17, -10),    S(-67, -11),    //
    S(16, 83),      S(47, -29),     S(3, -18),      S(-5, 7),       S(-13, 0),      S(-28, -34),    S(-16, -59),    S(-116, -112),  //
    S(-34, -18),    S(5, -20),      S(61, -101),    S(39, -27),     S(71, -42),     S(14, -147),    S(-42, -49),    S(-158, -63),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-74, 104),    S(-53, 25),     S(-565, 130),   S(-252, 113),   S(-312, 135),   S(-361, 132),   S(-5, 72),      S(-36, 56),     //
    S(32, -49),     S(51, 60),      S(42, 52),      S(95, -3),      S(62, 22),      S(26, 51),      S(29, 31),      S(-56, 52),     //
    S(17, 75),      S(79, 72),      S(294, 29),     S(154, 28),     S(108, 38),     S(45, 81),      S(144, 30),     S(-5, 92),      //
    S(20, 26),      S(62, 59),      S(147, 37),     S(149, 47),     S(152, 55),     S(67, 76),      S(73, 37),      S(-30, 56),     //
    S(38, -23),     S(42, 40),      S(52, 42),      S(104, 50),     S(106, 82),     S(25, 76),      S(47, 7),       S(38, -59),     //
    S(72, -34),     S(103, 2),      S(103, 5),      S(27, 57),      S(25, 64),      S(17, 73),      S(78, 8),       S(51, -51),     //
    S(29, -53),     S(103, -24),    S(49, -21),     S(26, 23),      S(18, -8),      S(58, -29),     S(-2, 14),      S(76, -113),    //
    S(59, -17),     S(22, 3),       S(18, 14),      S(20, -39),     S(4, -36),      S(27, 0),       S(41, -70),     S(-44, 14),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(119, 33),     S(172, 45),     S(114, 76),     S(73, 97),      S(110, 59),     S(68, 57),      S(87, 59),      S(97, 59),      //
    S(125, 74),     S(174, 68),     S(236, 48),     S(166, 94),     S(153, 96),     S(73, 109),     S(39, 107),     S(60, 96),      //
    S(45, 74),      S(291, 18),     S(248, 24),     S(272, -1),     S(170, 43),     S(83, 73),      S(139, 41),     S(-11, 91),     //
    S(14, 52),      S(56, 54),      S(78, 50),      S(123, -6),     S(89, 28),      S(31, 80),      S(7, 75),       S(-68, 67),     //
    S(-119, 17),    S(-2, 11),      S(-12, 26),     S(-18, 30),     S(-15, 20),     S(-51, 79),     S(-99, 80),     S(-118, 56),    //
    S(-112, 6),     S(0, -73),      S(-20, -32),    S(-59, -9),     S(-21, -34),    S(-114, 30),    S(-108, 9),     S(-108, -6),    //
    S(-170, 21),    S(-86, -42),    S(-36, -54),    S(-32, -39),    S(-51, -20),    S(-58, -22),    S(-115, -31),   S(-118, -33),   //
    S(-123, 4),     S(-96, 14),     S(-50, -25),    S(-15, -40),    S(-28, -21),    S(-36, -25),    S(-54, -39),    S(-81, -20),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(66, 75),      S(58, 70),      S(108, 47),     S(-106, 242),   S(-5, 124),     S(-54, 149),    S(46, 42),      S(-3, 21),      //
    S(92, 55),      S(-78, 246),    S(-59, 316),    S(-121, 302),   S(-90, 240),    S(-144, 266),   S(-63, 135),    S(-7, 24),      //
    S(-34, 178),    S(92, 162),     S(52, 200),     S(-30, 276),    S(-20, 190),    S(-84, 226),    S(15, 98),      S(-8, 8),       //
    S(47, 78),      S(19, 161),     S(24, 174),     S(-5, 236),     S(-15, 213),    S(-9, 133),     S(1, 54),       S(-19, 45),     //
    S(29, 96),      S(46, 76),      S(27, 121),     S(-7, 179),     S(-22, 182),    S(-23, 138),    S(-18, 42),     S(-12, -30),    //
    S(60, -148),    S(57, -26),     S(38, 60),      S(-40, 125),    S(8, 44),       S(-7, 62),      S(27, -59),     S(-3, -56),     //
    S(65, -275),    S(38, -306),    S(19, -123),    S(39, -42),     S(-5, 1),       S(54, -139),    S(27, -44),     S(-13, -42),    //
    S(-86, -67),    S(-90, -334),   S(-19, -305),   S(13, -206),    S(42, -119),    S(67, -221),    S(49, -177),    S(-4, -80),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(465, -731),   S(251, -122),   S(11, -36),     S(-106, 36),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(363, -172),   S(46, 124),     S(-54, 154),    S(320, 57),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(1, 33),       S(115, 154),    S(168, 115),    S(268, 43),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-237, 64),    S(1, 119),      S(139, 115),    S(119, 74),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-196, 1),     S(-34, 72),     S(23, 78),      S(-25, 121),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-140, -39),   S(64, -8),      S(-44, 62),     S(-90, 105),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(77, -119),    S(111, -46),    S(-5, 23),      S(-122, 85),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-32, -184),   S(70, -140),    S(-62, -97),    S(-30, -126),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
