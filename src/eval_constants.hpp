#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(282, 443);
inline const PParam KNIGHT_MAT = S(987, 1028);
inline const PParam BISHOP_MAT = S(976, 1084);
inline const PParam ROOK_MAT   = S(1485, 1804);
inline const PParam QUEEN_MAT  = S(3237, 3250);
inline const PParam TEMPO_VAL  = S(48, 15);

inline const PParam BISHOP_PAIR_VAL  = S(63, 187);
inline const PParam DOUBLED_PAWN_VAL = S(-47, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -2);
inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(54, 29), S(82, 71), S(190, 147), S(467, 573), S(1779, 1445),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(49, 48), S(52, 22), S(54, 38), S(105, 113), S(663, -133),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-4, 6), S(-27, 38), S(-28, 89), S(45, 140), S(75, 247), S(31, 46),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-121, -51), S(-124, -157), S(-71, -61), S(-21, -36), S(23, -15), S(45, 26), S(77, 23), S(100, 22), S(152, -58),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-145, -112), S(-74, -193), S(-13, -135), S(-2, -78), S(35, -47), S(46, -24), S(69, -15), S(79, -3), S(86, 6), S(88, 2), S(111, -8), S(169, -60), S(206, -75), S(275, -102),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-26, -303), S(-95, -95), S(-50, -46), S(-29, -46), S(-14, -13), S(0, 2), S(19, 9), S(47, 6), S(73, 15), S(100, 23), S(125, 23), S(138, 29), S(183, 16), S(170, 17), S(271, -76),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-152, -5), S(-385, 275), S(-220, -136), S(-158, -182), S(-113, -280), S(-80, -220), S(-115, -14), S(-91, -43), S(-77, -10), S(-75, 16), S(-66, 36), S(-65, 71), S(-43, 59), S(-28, 53), S(-20, 57), S(-7, 51), S(-22, 79), S(4, 35), S(21, 21), S(52, -28), S(93, -72), S(125, -134), S(221, -214), S(421, -408), S(384, -420), S(953, -700), S(744, -628), S(1363, -1000),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(371, 800), S(82, 433), S(14, 482), S(18, 511), S(0, 504), S(-17, 483), S(1, 490), S(15, 457), S(71, 333),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(86, -39), S(154, -90),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(24, -2), S(138, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(59, -75), S(91, -80), S(148, -80), S(176, -134),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-57, 29), S(-69, 60), S(7, -16), S(196, -116), S(456, -274),
};

inline const PParam PAWN_THREAT_KNIGHT = S(208, 70);
inline const PParam PAWN_THREAT_BISHOP = S(176, 79);
inline const PParam PAWN_THREAT_ROOK = S(175, 49);
inline const PParam PAWN_THREAT_QUEEN = S(146, -79);

inline const PParam KNIGHT_THREAT_BISHOP = S(84, 70);
inline const PParam KNIGHT_THREAT_ROOK = S(229, -13);
inline const PParam KNIGHT_THREAT_QUEEN = S(136, -71);

inline const PParam BISHOP_THREAT_KNIGHT = S(79, 16);
inline const PParam BISHOP_THREAT_ROOK = S(208, 31);
inline const PParam BISHOP_THREAT_QUEEN = S(168, 71);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-123, 487),   S(19, 490),     S(161, 437),    S(314, 216),    S(265, 232),    S(278, 329),    S(157, 365),    S(219, 352),    //
    S(12, -4),      S(175, 17),     S(114, -62),    S(147, -171),   S(73, -174),    S(18, -87),     S(-27, -10),    S(-49, -17),    //
    S(-43, -65),    S(-30, -58),    S(-29, -106),   S(-36, -139),   S(-48, -138),   S(-95, -132),   S(-107, -62),   S(-129, -42),   //
    S(-37, -141),   S(-20, -101),   S(-52, -147),   S(-52, -149),   S(-70, -159),   S(-102, -138),  S(-140, -68),   S(-152, -88),   //
    S(-33, -175),   S(25, -170),    S(-33, -132),   S(-93, -116),   S(-84, -136),   S(-133, -132),  S(-139, -105),  S(-170, -108),  //
    S(-25, -176),   S(123, -175),   S(42, -136),    S(-57, -100),   S(-78, -162),   S(-98, -127),   S(-113, -86),   S(-147, -103),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-410, -156),  S(-97, -71),    S(-557, 316),   S(-58, 66),     S(-331, 155),   S(-370, 182),   S(-408, -16),   S(-533, 46),    //
    S(48, -18),     S(82, 67),      S(203, -49),    S(30, 77),      S(85, 55),      S(42, 8),       S(-37, 25),     S(16, -41),     //
    S(36, 27),      S(0, 130),      S(215, 68),     S(95, 102),     S(139, 67),     S(33, 71),      S(33, 38),      S(-60, 13),     //
    S(113, 42),     S(40, 102),     S(88, 105),     S(75, 119),     S(85, 84),      S(73, 81),      S(7, 31),       S(17, 43),      //
    S(77, 26),      S(111, 36),     S(86, 73),      S(50, 70),      S(59, 76),      S(56, 79),      S(15, 32),      S(21, -59),     //
    S(3, -27),      S(37, -28),     S(17, -17),     S(44, 48),      S(55, 45),      S(-27, 4),      S(-22, -12),    S(-61, -18),    //
    S(21, 67),      S(53, -23),     S(7, -15),      S(-8, 15),      S(-16, -1),     S(-38, -30),    S(-22, -53),    S(-114, -114),  //
    S(-79, -16),    S(-2, -38),     S(58, -97),     S(36, -31),     S(65, -47),     S(3, -143),     S(-50, -52),    S(-172, -55),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-107, 110),   S(-39, 28),     S(-542, 132),   S(-281, 124),   S(-313, 142),   S(-426, 148),   S(-5, 82),      S(-8, 57),      //
    S(19, -33),     S(1, 82),       S(33, 61),      S(34, 20),      S(19, 44),      S(11, 60),      S(1, 45),       S(-59, 53),     //
    S(18, 77),      S(73, 80),      S(265, 46),     S(124, 45),     S(80, 54),      S(20, 92),      S(139, 32),     S(10, 87),      //
    S(33, 20),      S(33, 76),      S(130, 47),     S(126, 67),     S(131, 66),     S(56, 83),      S(31, 62),      S(-36, 69),     //
    S(30, -16),     S(48, 46),      S(64, 43),      S(86, 66),      S(86, 95),      S(31, 74),      S(35, 19),      S(19, -44),     //
    S(70, -23),     S(118, 2),      S(115, 6),      S(40, 65),      S(34, 71),      S(20, 78),      S(86, 4),       S(42, -41),     //
    S(38, -52),     S(119, -22),    S(59, -8),      S(42, 26),      S(29, -4),      S(62, -20),     S(7, 13),       S(67, -104),    //
    S(53, -11),     S(46, 16),      S(22, 28),      S(34, -32),     S(16, -28),     S(36, 0),       S(43, -65),     S(-31, 15),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(88, 38),      S(186, 38),     S(87, 78),      S(42, 95),      S(63, 70),      S(25, 68),      S(49, 67),      S(63, 66),      //
    S(116, 70),     S(169, 64),     S(241, 41),     S(160, 93),     S(156, 91),     S(67, 109),     S(32, 107),     S(52, 98),      //
    S(43, 71),      S(287, 9),      S(257, 16),     S(264, 1),      S(170, 35),     S(81, 74),      S(131, 43),     S(-12, 89),     //
    S(13, 56),      S(44, 58),      S(92, 44),      S(137, -9),     S(106, 18),     S(41, 80),      S(19, 71),      S(-70, 73),     //
    S(-110, 10),    S(23, -2),      S(-1, 28),      S(0, 24),       S(-2, 17),      S(-44, 78),     S(-92, 77),     S(-112, 58),    //
    S(-95, -7),     S(17, -80),     S(-7, -31),     S(-41, -13),    S(-8, -37),     S(-101, 30),    S(-105, 13),    S(-112, 1),     //
    S(-155, 19),    S(-67, -51),    S(-19, -54),    S(-26, -41),    S(-43, -24),    S(-54, -20),    S(-107, -33),   S(-115, -33),   //
    S(-126, 1),     S(-92, 10),     S(-50, -26),    S(-16, -42),    S(-29, -22),    S(-37, -26),    S(-55, -39),    S(-86, -20),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(0, 106),      S(24, 66),      S(71, 69),      S(-131, 235),   S(-49, 134),    S(-107, 180),   S(7, 49),       S(-59, 46),     //
    S(94, 56),      S(-94, 248),    S(-56, 297),    S(-149, 317),   S(-100, 240),   S(-146, 258),   S(-64, 126),    S(-4, 26),      //
    S(-30, 168),    S(77, 163),     S(49, 201),     S(-43, 269),    S(-32, 201),    S(-75, 214),    S(11, 94),      S(-4, 13),      //
    S(57, 64),      S(22, 154),     S(25, 162),     S(-11, 234),    S(-15, 206),    S(9, 112),      S(0, 61),       S(-17, 55),     //
    S(32, 92),      S(57, 66),      S(32, 133),     S(3, 166),      S(-19, 177),    S(-19, 132),    S(-3, 28),      S(-19, -7),     //
    S(68, -136),    S(62, -25),     S(51, 54),      S(-32, 127),    S(16, 44),      S(7, 42),       S(32, -65),     S(2, -46),      //
    S(53, -237),    S(45, -292),    S(24, -118),    S(46, -38),     S(0, 2),        S(49, -124),    S(33, -63),     S(-16, -32),    //
    S(-79, -56),    S(-78, -315),   S(-8, -285),    S(16, -202),    S(43, -112),    S(65, -205),    S(42, -158),    S(-17, -62),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(492, -690),   S(288, -131),   S(-32, -14),    S(-146, 51),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(358, -161),   S(19, 137),     S(-43, 165),    S(290, 79),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-14, 38),     S(109, 151),    S(177, 118),    S(232, 58),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-223, 61),    S(-4, 127),     S(146, 115),    S(107, 80),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-205, 4),     S(-33, 77),     S(36, 80),      S(-28, 126),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-149, -32),   S(63, -3),      S(-32, 63),     S(-79, 110),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(77, -119),    S(115, -45),    S(4, 26),       S(-106, 88),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-32, -181),   S(71, -138),    S(-58, -92),    S(-20, -122),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
