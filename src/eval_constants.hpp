#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(148, 107);
inline const PScore KNIGHT_MAT = S(734, 842);
inline const PScore BISHOP_MAT = S(810, 699);
inline const PScore ROOK_MAT   = S(965, 955);
inline const PScore QUEEN_MAT  = S(2083, 1522);
inline const PScore TEMPO_VAL  = S(48, 13);

inline const PScore BISHOP_PAIR_VAL  = S(52, 211);
inline const PScore DOUBLED_PAWN_VAL = S(-64, -81);

inline const PScore POTENTIAL_CHECKER_VAL = S(-78, 7);

inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(-4, 23), S(34, 37), S(76, 96), S(185, 169), S(572, 574), S(1235, 1361),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(46, 54), S(38, 36), S(46, 38), S(105, 91), S(407, 3),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(10, -14), S(-11, 22), S(-24, 81), S(38, 145), S(60, 234), S(190, 427),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-10, 9), S(103, 15), S(152, 109), S(195, 169), S(243, 192), S(266, 245), S(292, 217), S(321, 244), S(372, 161),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(49, -24), S(99, 69), S(141, 153), S(159, 239), S(195, 235), S(208, 267), S(244, 289), S(241, 298), S(244, 304), S(248, 306), S(276, 293), S(344, 230), S(384, 233), S(437, 207),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(119, 151), S(217, 488), S(266, 565), S(274, 539), S(298, 589), S(314, 608), S(330, 613), S(356, 617), S(385, 624), S(416, 629), S(440, 633), S(452, 642), S(496, 634), S(496, 625), S(611, 509),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(0, 0), S(284, 125), S(666, 393), S(596, 1094), S(597, 1329), S(612, 1366), S(588, 1534), S(635, 1479), S(647, 1477), S(663, 1482), S(662, 1492), S(668, 1555), S(694, 1519), S(725, 1492), S(725, 1512), S(741, 1481), S(739, 1487), S(776, 1418), S(820, 1394), S(897, 1283), S(908, 1278), S(964, 1176), S(1102, 1075), S(1193, 1000), S(1173, 942), S(1311, 903), S(1077, 922), S(1008, 945),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(444, 416), S(145, -60), S(38, 32), S(32, 68), S(0, 71), S(-16, 63), S(-1, 73), S(3, 39), S(58, -81),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(68, -44), S(136, -108),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(24, 3), S(148, -62),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -68), S(115, -93), S(148, -78), S(97, -104),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-57, 35), S(-166, 199), S(-67, 94), S(81, 46), S(187, 46),
};

inline const PScore PAWN_THREAT_KNIGHT = S(173, 68);
inline const PScore PAWN_THREAT_BISHOP = S(165, 77);
inline const PScore PAWN_THREAT_ROOK   = S(168, 55);
inline const PScore PAWN_THREAT_QUEEN  = S(154, -65);

inline const PScore KNIGHT_THREAT_BISHOP = S(84, 74);
inline const PScore KNIGHT_THREAT_ROOK   = S(230, -41);
inline const PScore KNIGHT_THREAT_QUEEN  = S(105, -58);

inline const PScore BISHOP_THREAT_KNIGHT = S(83, 17);
inline const PScore BISHOP_THREAT_ROOK   = S(225, 27);
inline const PScore BISHOP_THREAT_QUEEN  = S(217, 86);

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-144, 515),   S(-4, 527),     S(140, 461),    S(329, 219),    S(266, 253),    S(297, 343),    S(159, 426),    S(193, 382),    //
    S(160, 371),    S(358, 414),    S(265, 326),    S(327, 203),    S(234, 214),    S(169, 300),    S(112, 388),    S(85, 370),     //
    S(114, 307),    S(129, 300),    S(122, 249),    S(117, 209),    S(115, 208),    S(43, 214),     S(45, 308),     S(1, 327),      //
    S(113, 217),    S(146, 271),    S(95, 208),     S(76, 218),     S(82, 205),     S(47, 235),     S(0, 293),      S(-1, 293),     //
    S(125, 184),    S(194, 182),    S(125, 229),    S(53, 252),     S(83, 220),     S(23, 219),     S(6, 253),      S(-24, 247),    //
    S(115, 188),    S(291, 196),    S(193, 245),    S(85, 271),     S(62, 237),     S(47, 248),     S(24, 286),     S(-6, 267),     //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-334, -47),   S(-23, 15),     S(-293, 412),   S(90, 151),     S(-279, 278),   S(-219, 263),   S(-216, 42),    S(-507, 193),   //
    S(168, 93),     S(231, 123),    S(368, -4),     S(178, 192),    S(253, 111),    S(171, 101),    S(67, 82),      S(120, 79),     //
    S(177, 132),    S(141, 212),    S(395, 135),    S(237, 204),    S(280, 148),    S(182, 149),    S(203, 89),     S(62, 118),     //
    S(224, 145),    S(175, 209),    S(212, 202),    S(206, 236),    S(223, 172),    S(199, 169),    S(137, 126),    S(128, 184),    //
    S(200, 110),    S(242, 122),    S(207, 174),    S(166, 168),    S(191, 160),    S(196, 175),    S(152, 131),    S(138, 33),     //
    S(118, 59),     S(173, 40),     S(145, 55),     S(174, 139),    S(185, 141),    S(100, 76),     S(123, 44),     S(59, 77),      //
    S(111, 166),    S(188, 44),     S(131, 65),     S(112, 67),     S(110, 80),     S(103, 19),     S(105, 5),      S(-29, -35),    //
    S(46, 43),      S(113, 92),     S(191, -19),    S(162, 57),     S(191, 42),     S(129, -72),    S(66, 44),      S(-93, -6),     //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(53, 318),     S(43, 233),     S(-533, 348),   S(-196, 330),   S(-272, 342),   S(-289, 367),   S(69, 259),     S(53, 252),     //
    S(83, 191),     S(119, 266),    S(122, 263),    S(147, 223),    S(152, 211),    S(120, 243),    S(96, 233),     S(-16, 275),    //
    S(96, 322),     S(186, 289),    S(392, 224),    S(246, 231),    S(189, 249),    S(159, 267),    S(250, 229),    S(92, 311),     //
    S(131, 225),    S(139, 287),    S(226, 262),    S(220, 265),    S(234, 278),    S(149, 291),    S(152, 249),    S(16, 228),     //
    S(127, 222),    S(137, 234),    S(162, 241),    S(194, 261),    S(195, 292),    S(137, 263),    S(152, 215),    S(154, 150),    //
    S(184, 121),    S(217, 194),    S(198, 222),    S(155, 251),    S(146, 266),    S(133, 268),    S(211, 198),    S(168, 167),    //
    S(125, 117),    S(221, 149),    S(162, 185),    S(153, 222),    S(144, 179),    S(166, 158),    S(98, 215),     S(194, 69),     //
    S(177, 182),    S(122, 228),    S(139, 212),    S(152, 126),    S(132, 160),    S(149, 189),    S(164, 104),    S(92, 199),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(515, 436),    S(564, 432),    S(498, 488),    S(442, 521),    S(478, 470),    S(441, 466),    S(440, 477),    S(465, 465),    //
    S(483, 472),    S(523, 460),    S(615, 440),    S(534, 490),    S(520, 496),    S(404, 536),    S(356, 537),    S(387, 509),    //
    S(390, 482),    S(682, 400),    S(629, 414),    S(625, 407),    S(500, 456),    S(415, 486),    S(460, 458),    S(307, 517),    //
    S(336, 466),    S(393, 476),    S(371, 474),    S(439, 439),    S(422, 476),    S(358, 513),    S(319, 503),    S(252, 483),    //
    S(196, 464),    S(288, 438),    S(316, 459),    S(293, 434),    S(316, 454),    S(284, 516),    S(232, 520),    S(236, 482),    //
    S(203, 409),    S(330, 322),    S(318, 384),    S(247, 405),    S(302, 406),    S(197, 466),    S(190, 425),    S(210, 404),    //
    S(150, 454),    S(247, 370),    S(299, 371),    S(284, 394),    S(279, 389),    S(256, 401),    S(223, 383),    S(181, 401),    //
    S(190, 412),    S(245, 409),    S(266, 389),    S(305, 371),    S(291, 405),    S(267, 390),    S(264, 350),    S(220, 419),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(587, 871),    S(604, 817),    S(570, 919),    S(468, 985),    S(510, 893),    S(504, 917),    S(583, 790),    S(490, 842),    //
    S(581, 864),    S(409, 1082),   S(463, 1125),   S(489, 982),    S(462, 1008),   S(327, 1111),   S(408, 996),    S(466, 852),    //
    S(458, 935),    S(565, 1005),   S(543, 984),    S(493, 1078),   S(487, 994),    S(359, 1115),   S(462, 1004),   S(446, 881),    //
    S(557, 868),    S(502, 988),    S(541, 978),    S(497, 1051),   S(467, 1091),   S(457, 990),    S(437, 983),    S(419, 927),    //
    S(447, 948),    S(489, 956),    S(460, 1045),   S(400, 1099),   S(419, 1131),   S(386, 1072),   S(416, 960),    S(421, 878),    //
    S(534, 708),    S(509, 840),    S(491, 965),    S(387, 1090),   S(408, 1014),   S(443, 988),    S(463, 876),    S(443, 755),    //
    S(477, 658),    S(487, 612),    S(449, 844),    S(472, 861),    S(434, 922),    S(493, 790),    S(439, 824),    S(419, 873),    //
    S(337, 805),    S(460, 451),    S(440, 539),    S(440, 747),    S(469, 826),    S(467, 815),    S(454, 801),    S(423, 893),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-128, -543),  S(-5, -17),     S(-276, 34),    S(-333, 101),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(198, -117),   S(-2, 158),     S(-128, 189),   S(283, 61),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-115, 83),    S(72, 174),     S(100, 142),    S(272, 49),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-381, 107),   S(-93, 159),    S(97, 129),     S(11, 114),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-323, 53),    S(-128, 90),    S(-40, 124),    S(-120, 146),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-241, 19),    S(2, 23),       S(-98, 99),     S(-152, 132),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(37, -97),     S(73, -41),     S(-45, 21),     S(-158, 84),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-91, -136),   S(20, -125),    S(-119, -97),   S(-96, -123),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
