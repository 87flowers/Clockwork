#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(289, 448);
inline const PParam KNIGHT_MAT = S(997, 987);
inline const PParam BISHOP_MAT = S(1022, 1067);
inline const PParam ROOK_MAT   = S(1521, 1784);
inline const PParam QUEEN_MAT  = S(3351, 3241);
inline const PParam TEMPO_VAL  = S(27, 17);

inline const PParam BISHOP_PAIR_VAL     = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL    = S(-52, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-72, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(-2, 21), S(55, 26), S(81, 71), S(187, 149), S(544, 535), S(1771, 1475),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(48, 21), S(52, 36), S(98, 109), S(626, -122),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(5, 0), S(-20, 33), S(-25, 81), S(44, 131), S(73, 232), S(41, 28),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-202, -173), S(-92, -127), S(-40, -32), S(8, -6), S(55, 15), S(73, 58), S(106, 54), S(128, 52), S(182, -32),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-119, -300), S(-70, -194), S(-9, -126), S(4, -70), S(41, -39), S(56, -16), S(77, -5), S(85, 6), S(90, 15), S(93, 13), S(123, -1), S(166, -50), S(203, -56), S(261, -75),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-208, -309), S(-77, -112), S(-29, -36), S(-8, -44), S(2, -4), S(18, 13), S(37, 18), S(63, 16), S(88, 26), S(117, 31), S(142, 32), S(155, 37), S(199, 23), S(191, 21), S(281, -66),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(64, 100), S(-640, 507), S(-229, -376), S(-145, -256), S(-117, -212), S(-70, -200), S(-103, -10), S(-82, -41), S(-67, -5), S(-67, 20), S(-52, 31), S(-52, 67), S(-30, 51), S(-17, 50), S(-11, 57), S(5, 45), S(-10, 66), S(16, 24), S(26, 22), S(63, -40), S(101, -80), S(117, -134), S(241, -234), S(417, -394), S(398, -419), S(943, -690), S(732, -648), S(1335, -962),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(417, 813), S(82, 448), S(18, 489), S(19, 516), S(2, 505), S(-23, 488), S(-1, 493), S(8, 461), S(57, 340),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -36), S(154, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(19, 3), S(129, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -62), S(84, -78), S(134, -76), S(136, -121),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-51, 34), S(-72, 52), S(12, -27), S(175, -122), S(452, -290),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-116, 490),   S(14, 502),     S(179, 430),    S(342, 211),    S(279, 232),    S(302, 316),    S(176, 367),    S(219, 357),    //
    S(12, -1),      S(189, 20),     S(121, -61),    S(150, -162),   S(76, -164),    S(23, -88),     S(-27, -6),     S(-57, -9),     //
    S(-47, -65),    S(-20, -62),    S(-27, -106),   S(-30, -141),   S(-46, -140),   S(-91, -138),   S(-106, -65),   S(-134, -43),   //
    S(-39, -142),   S(-12, -106),   S(-48, -149),   S(-47, -152),   S(-68, -162),   S(-100, -139),  S(-140, -69),   S(-159, -87),   //
    S(-35, -175),   S(32, -171),    S(-28, -131),   S(-89, -118),   S(-79, -140),   S(-133, -135),  S(-138, -107),  S(-173, -107),  //
    S(-29, -177),   S(127, -175),   S(45, -135),    S(-56, -94),    S(-75, -147),   S(-99, -129),   S(-115, -85),   S(-153, -102),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-441, -134),  S(-112, -54),   S(-523, 314),   S(-7, 53),      S(-354, 166),   S(-334, 173),   S(-454, 14),    S(-587, 84),    //
    S(99, -19),     S(124, 56),     S(302, -90),    S(79, 72),      S(155, 28),     S(115, -6),     S(-6, 25),      S(50, -43),     //
    S(49, 26),      S(44, 112),     S(251, 55),     S(145, 94),     S(204, 45),     S(69, 66),      S(84, 19),      S(-50, 10),     //
    S(126, 46),     S(39, 101),     S(100, 102),    S(74, 123),     S(94, 79),      S(84, 86),      S(9, 28),       S(23, 45),      //
    S(94, 24),      S(108, 32),     S(83, 81),      S(50, 68),      S(50, 84),      S(57, 87),      S(17, 26),      S(35, -65),     //
    S(-2, -25),     S(34, -32),     S(13, -20),     S(38, 50),      S(58, 47),      S(-26, 1),      S(-15, -12),    S(-65, -12),    //
    S(18, 81),      S(49, -30),     S(5, -20),      S(-3, 6),       S(-11, 0),      S(-26, -35),    S(-14, -59),    S(-114, -112),  //
    S(-30, -22),    S(7, -21),      S(63, -102),    S(41, -28),     S(73, -43),     S(16, -148),    S(-41, -50),    S(-154, -65),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-75, 104),    S(-54, 24),     S(-567, 129),   S(-252, 113),   S(-314, 134),   S(-356, 129),   S(-6, 72),      S(-39, 56),     //
    S(29, -49),     S(49, 59),      S(39, 52),      S(93, -4),      S(61, 22),      S(24, 50),      S(27, 31),      S(-59, 52),     //
    S(15, 75),      S(77, 71),      S(292, 28),     S(151, 28),     S(106, 37),     S(43, 81),      S(142, 30),     S(-7, 92),      //
    S(18, 25),      S(60, 59),      S(145, 37),     S(147, 46),     S(150, 55),     S(65, 75),      S(70, 37),      S(-32, 56),     //
    S(36, -23),     S(40, 39),      S(49, 42),      S(102, 50),     S(104, 82),     S(23, 76),      S(45, 7),       S(36, -58),     //
    S(70, -34),     S(101, 2),      S(101, 5),      S(24, 57),      S(22, 64),      S(15, 73),      S(75, 8),       S(48, -51),     //
    S(27, -53),     S(101, -24),    S(47, -21),     S(24, 23),      S(15, -8),      S(55, -29),     S(-4, 14),      S(73, -113),    //
    S(56, -17),     S(20, 3),       S(15, 14),      S(18, -39),     S(2, -36),      S(24, 1),       S(39, -69),     S(-46, 14),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(123, 34),     S(176, 47),     S(119, 78),     S(77, 99),      S(114, 61),     S(73, 59),      S(90, 61),      S(100, 61),     //
    S(128, 77),     S(178, 70),     S(240, 51),     S(169, 96),     S(157, 98),     S(76, 112),     S(42, 109),     S(64, 98),      //
    S(49, 76),      S(295, 20),     S(252, 26),     S(275, 0),      S(173, 46),     S(86, 76),      S(142, 44),     S(-8, 94),      //
    S(17, 55),      S(59, 56),      S(81, 52),      S(127, -4),     S(92, 30),      S(34, 82),      S(10, 78),      S(-65, 70),     //
    S(-116, 19),    S(0, 14),       S(-9, 28),      S(-15, 32),     S(-12, 22),     S(-48, 81),     S(-96, 82),     S(-115, 58),    //
    S(-109, 8),     S(2, -70),      S(-17, -29),    S(-56, -6),     S(-18, -32),    S(-111, 32),    S(-105, 12),    S(-105, -3),    //
    S(-167, 23),    S(-83, -39),    S(-33, -52),    S(-29, -36),    S(-48, -17),    S(-55, -20),    S(-112, -29),   S(-115, -30),   //
    S(-121, 7),     S(-93, 17),     S(-47, -22),    S(-12, -37),    S(-25, -18),    S(-33, -22),    S(-51, -36),    S(-78, -17),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(68, 76),      S(59, 72),      S(116, 42),     S(-107, 246),   S(-3, 125),     S(-52, 149),    S(47, 44),      S(-1, 21),      //
    S(95, 55),      S(-75, 246),    S(-56, 316),    S(-118, 302),   S(-87, 240),    S(-142, 267),   S(-61, 136),    S(-5, 26),      //
    S(-32, 179),    S(96, 161),     S(55, 200),     S(-27, 276),    S(-18, 190),    S(-82, 227),    S(18, 99),      S(-7, 10),      //
    S(49, 79),      S(21, 160),     S(27, 174),     S(-2, 236),     S(-12, 213),    S(-7, 134),     S(4, 55),       S(-17, 46),     //
    S(32, 97),      S(49, 76),      S(30, 122),     S(-4, 179),     S(-19, 182),    S(-20, 138),    S(-16, 43),     S(-9, -29),     //
    S(63, -148),    S(60, -26),     S(40, 61),      S(-37, 125),    S(11, 45),      S(-4, 63),      S(30, -58),     S(-1, -55),     //
    S(70, -280),    S(41, -305),    S(22, -122),    S(42, -41),     S(-2, 1),       S(56, -138),    S(30, -44),     S(-11, -40),    //
    S(-85, -64),    S(-97, -318),   S(-16, -303),   S(16, -205),    S(45, -118),    S(70, -221),    S(52, -177),    S(0, -82),      //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(455, -722),   S(239, -115),   S(48, -43),     S(-71, 30),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(368, -171),   S(59, 123),     S(-49, 154),    S(336, 55),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(7, 33),       S(117, 155),    S(172, 116),    S(275, 43),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-236, 66),    S(1, 121),      S(139, 117),    S(119, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-198, 3),     S(-34, 74),     S(22, 80),      S(-26, 123),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-143, -36),   S(62, -6),      S(-46, 64),     S(-92, 108),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(74, -116),    S(109, -43),    S(-8, 26),      S(-125, 88),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-35, -180),   S(68, -137),    S(-65, -94),    S(-33, -123),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
