#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(286, 447);
inline const PParam KNIGHT_MAT = S(998, 996);
inline const PParam BISHOP_MAT = S(1020, 1061);
inline const PParam ROOK_MAT   = S(1516, 1802);
inline const PParam QUEEN_MAT  = S(3320, 3284);
inline const PParam TEMPO_VAL  = S(34, 16);

inline const PParam BISHOP_PAIR_VAL  = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL = S(-49, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(54, 25), S(80, 71), S(184, 149), S(523, 545), S(1784, 1454),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(49, 21), S(55, 36), S(100, 109), S(633, -123),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(4, 0), S(-20, 33), S(-27, 82), S(45, 131), S(72, 233), S(34, 34),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-211, -174), S(-101, -129), S(-45, -34), S(5, -9), S(53, 12), S(73, 55), S(107, 50), S(130, 49), S(185, -35),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-121, -286), S(-72, -182), S(-12, -114), S(1, -58), S(38, -27), S(52, -4), S(74, 6), S(80, 19), S(86, 28), S(87, 25), S(116, 10), S(159, -38), S(196, -44), S(255, -64),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-197, -324), S(-82, -116), S(-34, -41), S(-12, -49), S(-1, -9), S(14, 9), S(33, 14), S(59, 12), S(84, 22), S(113, 27), S(138, 29), S(151, 33), S(195, 20), S(187, 18), S(278, -70),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(68, 102), S(-632, 511), S(-225, -393), S(-152, -258), S(-123, -216), S(-74, -208), S(-109, -13), S(-89, -41), S(-74, -6), S(-73, 19), S(-60, 31), S(-60, 67), S(-39, 52), S(-26, 52), S(-19, 57), S(-2, 45), S(-17, 66), S(8, 24), S(19, 21), S(55, -41), S(92, -80), S(107, -134), S(233, -235), S(410, -396), S(395, -423), S(934, -691), S(726, -651), S(1315, -957),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(392, 829), S(81, 450), S(17, 492), S(18, 519), S(0, 508), S(-26, 492), S(-5, 497), S(4, 465), S(52, 343),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -37), S(157, -90),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(18, 3), S(125, -39),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(66, -63), S(84, -77), S(134, -76), S(134, -122),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-50, 33), S(-73, 52), S(10, -28), S(169, -120), S(443, -286),
};

inline const PParam PAWN_THREAT_KNIGHT = S(179, 73);
inline const PParam PAWN_THREAT_BISHOP = S(162, 65);
inline const PParam PAWN_THREAT_ROOK   = S(136, 52);
inline const PParam PAWN_THREAT_QUEEN  = S(109, -55);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-114, 491),   S(7, 505),      S(173, 433),    S(333, 213),    S(274, 234),    S(298, 318),    S(169, 371),    S(222, 356),    //
    S(12, 2),       S(185, 25),     S(116, -56),    S(146, -158),   S(71, -160),    S(19, -84),     S(-28, -2),     S(-55, -6),     //
    S(-48, -61),    S(-25, -58),    S(-31, -102),   S(-36, -136),   S(-52, -134),   S(-95, -134),   S(-110, -61),   S(-135, -40),   //
    S(-38, -139),   S(-16, -102),   S(-50, -146),   S(-49, -149),   S(-69, -159),   S(-101, -136),  S(-142, -66),   S(-157, -85),   //
    S(-35, -172),   S(31, -167),    S(-29, -128),   S(-89, -115),   S(-79, -137),   S(-132, -132),  S(-138, -104),  S(-173, -105),  //
    S(-28, -174),   S(126, -171),   S(45, -132),    S(-55, -91),    S(-74, -144),   S(-98, -126),   S(-114, -82),   S(-151, -99),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-435, -141),  S(-111, -55),   S(-536, 319),   S(-16, 55),     S(-367, 171),   S(-347, 178),   S(-455, 14),    S(-591, 79),    //
    S(94, -16),     S(121, 58),     S(293, -87),    S(66, 78),      S(145, 33),     S(108, -3),     S(-11, 28),     S(43, -40),     //
    S(49, 28),      S(41, 115),     S(244, 59),     S(139, 97),     S(193, 50),     S(62, 69),      S(82, 21),      S(-50, 11),     //
    S(126, 48),     S(43, 105),     S(100, 104),    S(68, 128),     S(90, 83),      S(80, 89),      S(10, 31),      S(22, 47),      //
    S(92, 27),      S(112, 36),     S(82, 85),      S(48, 72),      S(48, 87),      S(56, 89),      S(17, 29),      S(34, -63),     //
    S(-4, -22),     S(30, -29),     S(8, -17),      S(33, 53),      S(52, 51),      S(-31, 4),      S(-19, -9),     S(-68, -9),     //
    S(16, 83),      S(47, -26),     S(0, -17),      S(-10, 10),     S(-17, 2),      S(-33, -31),    S(-16, -58),    S(-118, -109),  //
    S(-34, -19),    S(2, -17),      S(60, -101),    S(37, -25),     S(70, -40),     S(11, -146),    S(-45, -46),    S(-155, -62),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-80, 106),    S(-61, 29),     S(-572, 133),   S(-263, 119),   S(-319, 138),   S(-363, 134),   S(-5, 75),      S(-39, 57),     //
    S(24, -44),     S(53, 61),      S(38, 56),      S(94, -1),      S(61, 25),      S(24, 53),      S(28, 34),      S(-57, 54),     //
    S(30, 71),      S(87, 72),      S(304, 28),     S(156, 30),     S(110, 39),     S(49, 83),      S(147, 31),     S(2, 91),       //
    S(25, 27),      S(71, 60),      S(155, 38),     S(154, 49),     S(155, 58),     S(72, 77),      S(79, 39),      S(-28, 59),     //
    S(37, -20),     S(45, 44),      S(54, 45),      S(107, 53),     S(110, 85),     S(28, 79),      S(49, 11),      S(39, -56),     //
    S(71, -32),     S(102, 5),      S(104, 8),      S(26, 60),      S(23, 67),      S(17, 76),      S(75, 11),      S(49, -49),     //
    S(27, -51),     S(102, -21),    S(50, -19),     S(23, 25),      S(15, -5),      S(55, -26),     S(-4, 17),      S(71, -111),    //
    S(59, -16),     S(22, 4),       S(13, 18),      S(18, -37),     S(1, -33),      S(22, 3),       S(37, -67),     S(-44, 15),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(123, 34),     S(174, 47),     S(117, 78),     S(76, 98),      S(113, 61),     S(72, 58),      S(91, 60),      S(98, 61),      //
    S(126, 77),     S(178, 68),     S(240, 49),     S(168, 96),     S(156, 97),     S(74, 112),     S(42, 108),     S(64, 97),      //
    S(51, 75),      S(297, 18),     S(254, 24),     S(276, 0),      S(174, 44),     S(85, 75),      S(143, 42),     S(-7, 93),      //
    S(19, 53),      S(64, 55),      S(86, 50),      S(129, -5),     S(95, 29),      S(37, 81),      S(15, 76),      S(-64, 69),     //
    S(-115, 18),    S(8, 11),       S(-5, 27),      S(-10, 31),     S(-7, 20),      S(-45, 80),     S(-91, 80),     S(-113, 57),    //
    S(-107, 7),     S(7, -73),      S(-15, -31),    S(-53, -8),     S(-15, -33),    S(-109, 31),    S(-102, 10),    S(-103, -5),    //
    S(-165, 22),    S(-80, -41),    S(-32, -52),    S(-29, -37),    S(-47, -19),    S(-55, -20),    S(-110, -31),   S(-112, -32),   //
    S(-120, 5),     S(-92, 15),     S(-48, -23),    S(-12, -39),    S(-24, -20),    S(-33, -24),    S(-50, -38),    S(-79, -19),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(65, 79),      S(56, 74),      S(111, 47),     S(-102, 242),   S(-4, 127),     S(-55, 153),    S(41, 49),      S(-4, 24),      //
    S(94, 56),      S(-77, 249),    S(-61, 323),    S(-119, 304),   S(-89, 244),    S(-145, 270),   S(-63, 139),    S(-5, 25),      //
    S(-35, 184),    S(94, 164),     S(50, 205),     S(-29, 279),    S(-20, 193),    S(-84, 229),    S(14, 103),     S(-8, 11),      //
    S(49, 80),      S(23, 162),     S(27, 175),     S(-3, 240),     S(-15, 217),    S(-8, 136),     S(6, 53),       S(-19, 47),     //
    S(29, 100),     S(51, 76),      S(28, 127),     S(-5, 182),     S(-20, 184),    S(-22, 143),    S(-18, 45),     S(-12, -27),    //
    S(57, -138),    S(59, -23),     S(38, 65),      S(-39, 128),    S(8, 48),       S(-6, 65),      S(28, -58),     S(-2, -55),     //
    S(64, -271),    S(40, -304),    S(21, -121),    S(38, -38),     S(-6, 4),       S(53, -135),    S(27, -40),     S(-14, -38),    //
    S(-90, -60),    S(-90, -323),   S(-23, -296),   S(11, -200),    S(41, -115),    S(67, -220),    S(47, -171),    S(-5, -77),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(461, -723),   S(242, -110),   S(47, -38),     S(-75, 36),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(378, -169),   S(63, 128),     S(-44, 159),    S(340, 59),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(10, 38),      S(123, 160),    S(175, 121),    S(283, 47),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-232, 70),    S(7, 125),      S(145, 121),    S(125, 80),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-193, 7),     S(-29, 78),     S(28, 84),      S(-20, 127),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-139, -31),   S(68, -2),      S(-39, 68),     S(-85, 112),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(80, -113),    S(116, -40),    S(0, 29),       S(-118, 92),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-31, -176),   S(72, -134),    S(-60, -91),    S(-28, -119),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
