#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(285, 393);
inline const PParam KNIGHT_MAT = S(1089, 964);
inline const PParam BISHOP_MAT = S(1083, 1032);
inline const PParam ROOK_MAT   = S(1596, 1710);
inline const PParam QUEEN_MAT  = S(3605, 3027);
inline const PParam TEMPO_VAL  = S(60, 20);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam DOUBLED_PAWN_VAL = S(-33, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(16, 20), S(55, 31), S(76, 68), S(197, 135), S(515, 271), S(971, 1193),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(58, 43), S(52, 27), S(54, 53), S(137, 117), S(641, -79),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-49, 20), S(-35, 35), S(-6, 106), S(61, 181), S(98, 312), S(258, 113),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(46, -42), S(27, 0), S(10, 29), S(17, 73), S(85, 152), S(172, 274),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(12, -39), S(-3, 6), S(-24, -15), S(-24, -41), S(-43, -84), S(-221, -139),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(13, 33), S(-27, 37), S(-18, -13), S(-7, -42), S(-1, -36), S(28, -43), S(7, -55),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-178, -109), S(18, -67), S(-21, -23), S(-2, 7), S(2, 33), S(26, 31), S(-25, 54),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-206, -297), S(-102, -127), S(-45, -78), S(-3, -43), S(40, -26), S(63, 15), S(95, 13), S(126, 8), S(172, -56),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-142, -375), S(-66, -184), S(15, -115), S(46, -72), S(74, -38), S(93, -21), S(108, -11), S(123, -6), S(134, 0), S(142, -11), S(161, -27), S(218, -77), S(240, -91), S(307, -135),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-209, -394), S(-114, -144), S(-61, -71), S(-23, -56), S(5, -28), S(27, -10), S(49, -1), S(79, -1), S(105, 7), S(134, 17), S(162, 15), S(178, 20), S(215, 13), S(235, -2), S(376, -128),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-417, 70), S(-275, -775), S(-178, -649), S(-132, -428), S(-105, -250), S(-70, -165), S(-72, -21), S(-45, -24), S(-36, 18), S(-26, 42), S(-17, 66), S(-12, 85), S(4, 84), S(16, 84), S(22, 88), S(42, 73), S(36, 82), S(49, 66), S(74, 29), S(101, -10), S(130, -45), S(162, -111), S(216, -147), S(386, -325), S(362, -337), S(752, -551), S(570, -504), S(1187, -826),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(471, 564), S(175, 399), S(77, 484), S(64, 519), S(41, 515), S(5, 516), S(28, 510), S(21, 492), S(24, 424),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(94, -33), S(166, -76),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(40, -2), S(142, -39),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -44), S(68, -69), S(112, -71), S(142, -133),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-38, 30), S(-58, 41), S(-1, -9), S(150, -92), S(348, -236),
};

inline const PParam PAWN_THREAT_KNIGHT = S(237, 66);
inline const PParam PAWN_THREAT_BISHOP = S(199, 113);
inline const PParam PAWN_THREAT_ROOK   = S(190, 59);
inline const PParam PAWN_THREAT_QUEEN  = S(163, -45);

inline const std::array<PParam, 2> KNIGHT_THREAT_PAWN = {
    S(16, 91), S(-41, 15),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_KNIGHT = {
    S(4, -36), S(-58, -11),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_BISHOP = {
    S(165, 49), S(88, 68),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_ROOK = {
    S(286, -47), S(208, 45),
};
inline const std::array<PParam, 2> KNIGHT_THREAT_QUEEN = {
    S(160, -95), S(140, -37),
};

inline const std::array<PParam, 2> BISHOP_THREAT_PAWN = {
    S(42, 76), S(-8, -3),
};
inline const std::array<PParam, 2> BISHOP_THREAT_KNIGHT = {
    S(196, 40), S(102, 22),
};
inline const std::array<PParam, 2> BISHOP_THREAT_BISHOP = {
    S(17, 12), S(-16, -11),
};
inline const std::array<PParam, 2> BISHOP_THREAT_ROOK = {
    S(236, -5), S(215, 145),
};
inline const std::array<PParam, 2> BISHOP_THREAT_QUEEN = {
    S(210, -15), S(174, 134),
};

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-6, -11), S(-7, -4), S(-7, -13), S(-11, -22), S(-18, -27), S(-24, -31), S(-26, -38), S(-33, -35), S(-42, -45),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(180, 396),    S(198, 443),    S(244, 414),    S(300, 290),    S(225, 302),    S(225, 365),    S(136, 379),    S(181, 350),    //
    S(57, -14),     S(186, 10),     S(160, -48),    S(164, -105),   S(118, -119),   S(66, -76),     S(27, -26),     S(-35, -27),    //
    S(-3, -55),     S(24, -51),     S(40, -94),     S(19, -105),    S(6, -111),     S(-27, -109),   S(-71, -61),    S(-102, -40),   //
    S(-12, -111),   S(7, -81),      S(8, -117),     S(-7, -113),    S(-27, -123),   S(-54, -109),   S(-112, -58),   S(-130, -74),   //
    S(-29, -140),   S(38, -137),    S(-5, -96),     S(-38, -89),    S(-53, -100),   S(-96, -101),   S(-116, -88),   S(-146, -93),   //
    S(-20, -137),   S(112, -133),   S(74, -102),    S(14, -82),     S(-22, -95),    S(-56, -96),    S(-87, -69),    S(-124, -84),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-399, -71),   S(-322, 51),    S(-404, 229),   S(-129, 96),    S(-266, 112),   S(-357, 133),   S(-553, 82),    S(-519, 31),    //
    S(3, 16),       S(87, 22),      S(190, -48),    S(127, 26),     S(135, 26),     S(70, 0),       S(8, 23),       S(-24, -15),    //
    S(70, -8),      S(121, 44),     S(220, 25),     S(178, 41),     S(191, 27),     S(93, 39),      S(77, 28),      S(-25, 34),     //
    S(112, 29),     S(116, 46),     S(152, 52),     S(146, 75),     S(149, 63),     S(109, 62),     S(65, 17),      S(42, 24),      //
    S(109, 16),     S(136, 11),     S(144, 29),     S(122, 43),     S(112, 56),     S(107, 48),     S(63, 24),      S(45, -33),     //
    S(17, -1),      S(42, -20),     S(56, -10),     S(63, 39),      S(72, 35),      S(13, 10),      S(9, -24),      S(-39, -17),    //
    S(3, 24),       S(39, -7),      S(26, -9),      S(23, 9),       S(11, -1),      S(-16, -16),    S(-3, -23),     S(-72, -95),    //
    S(-39, -30),    S(7, -6),       S(23, -18),     S(35, -9),      S(29, 0),       S(-17, -34),    S(-40, -15),    S(-91, -53),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-137, 96),    S(-168, 63),    S(-384, 85),    S(-306, 120),   S(-233, 117),   S(-413, 140),   S(-115, 107),   S(-87, 99),     //
    S(37, -5),      S(28, 58),      S(28, 49),      S(27, 39),      S(11, 50),      S(27, 51),      S(0, 50),       S(-27, 44),     //
    S(59, 53),      S(114, 52),     S(222, 46),     S(135, 48),     S(118, 50),     S(87, 65),      S(139, 37),     S(21, 54),      //
    S(71, 2),       S(77, 65),      S(131, 53),     S(145, 77),     S(149, 77),     S(76, 76),      S(54, 61),      S(2, 46),       //
    S(71, -16),     S(93, 23),      S(101, 49),     S(109, 65),     S(98, 86),      S(55, 77),      S(38, 34),      S(23, -20),     //
    S(86, -25),     S(134, 1),      S(141, 11),     S(74, 55),      S(58, 63),      S(55, 62),      S(86, 15),      S(55, -27),     //
    S(76, -62),     S(121, -33),    S(99, -25),     S(72, 6),       S(63, -12),     S(59, -15),     S(35, -4),      S(60, -69),     //
    S(71, -37),     S(63, 6),       S(70, 3),       S(86, -26),     S(93, -32),     S(85, -2),      S(75, -21),     S(51, -21),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(156, 46),     S(218, 44),     S(136, 77),     S(142, 73),     S(162, 52),     S(104, 70),     S(121, 73),     S(134, 73),     //
    S(82, 94),      S(170, 70),     S(232, 51),     S(175, 85),     S(184, 76),     S(133, 85),     S(87, 101),     S(65, 112),     //
    S(65, 72),      S(207, 38),     S(244, 24),     S(267, 13),     S(221, 24),     S(137, 66),     S(152, 55),     S(33, 108),     //
    S(18, 64),      S(88, 57),      S(126, 49),     S(168, 6),      S(134, 30),     S(62, 84),      S(43, 79),      S(-29, 90),     //
    S(-53, 24),     S(26, 29),      S(22, 41),      S(22, 38),      S(18, 32),      S(-10, 77),     S(-40, 74),     S(-62, 63),     //
    S(-81, 3),      S(-8, -22),     S(-4, 1),       S(-22, 7),      S(0, -14),      S(-52, 34),     S(-60, 23),     S(-80, 16),     //
    S(-126, 8),     S(-36, -38),    S(-10, -28),    S(1, -30),      S(-5, -26),     S(-25, -11),    S(-44, -31),    S(-86, -15),    //
    S(-103, 13),    S(-64, 19),     S(-17, -13),    S(14, -31),     S(5, -18),      S(-6, -12),     S(-29, -17),    S(-61, 0),      //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(52, 79),      S(72, 51),      S(67, 67),      S(-55, 202),    S(36, 97),      S(-41, 147),    S(37, 48),      S(-2, 62),      //
    S(38, 118),     S(-39, 207),    S(-47, 266),    S(-124, 295),   S(-103, 242),   S(-124, 250),   S(-60, 148),    S(-20, 77),     //
    S(-8, 149),     S(76, 149),     S(21, 220),     S(2, 228),      S(-35, 209),    S(-80, 221),    S(6, 107),      S(-29, 74),     //
    S(43, 76),      S(32, 159),     S(0, 184),      S(0, 236),      S(-25, 220),    S(-24, 145),    S(-4, 79),      S(-5, 33),      //
    S(14, 105),     S(50, 58),      S(23, 126),     S(-7, 173),     S(-27, 164),    S(-22, 123),    S(-16, 52),     S(-9, 2),       //
    S(29, -76),     S(46, -20),     S(47, 44),      S(-9, 81),      S(8, 26),       S(9, 32),       S(16, -31),     S(-3, -18),     //
    S(17, -179),    S(47, -284),    S(32, -137),    S(50, -67),     S(20, -47),     S(39, -122),    S(17, -58),     S(7, -64),      //
    S(-33, -90),    S(35, -355),    S(32, -347),    S(66, -264),    S(60, -177),    S(67, -218),    S(46, -169),    S(-11, -89),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-105, -400),  S(149, -45),    S(-34, 24),     S(-112, 54),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(245, -124),   S(27, 145),     S(39, 142),     S(186, 84),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-20, 54),     S(103, 140),    S(123, 119),    S(119, 75),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-241, 83),    S(62, 103),     S(60, 103),     S(-8, 89),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-200, 37),    S(-21, 78),     S(9, 78),       S(-76, 118),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-121, 9),     S(74, 20),      S(-13, 72),     S(-56, 99),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(102, -81),    S(150, -19),    S(62, 27),      S(-13, 70),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-23, -116),   S(113, -102),   S(24, -68),     S(2, -61),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// Epoch duration: 38.9337s
// Loss: 0.00246796
// clang-format on
}
