#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(288, 453);
inline const PParam KNIGHT_MAT = S(983, 999);
inline const PParam BISHOP_MAT = S(1002, 1074);
inline const PParam ROOK_MAT   = S(1505, 1815);
inline const PParam QUEEN_MAT  = S(3270, 3323);
inline const PParam TEMPO_VAL  = S(27, 17);

inline const PParam BISHOP_PAIR_VAL     = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL    = S(-51, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-72, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(-1, 21), S(55, 26), S(81, 71), S(185, 151), S(496, 563), S(1755, 1472),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(48, 21), S(51, 37), S(96, 111), S(643, -130),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(4, 0), S(-20, 32), S(-25, 81), S(44, 132), S(71, 234), S(40, 33),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-199, -180), S(-94, -124), S(-41, -29), S(7, -3), S(54, 17), S(72, 61), S(105, 57), S(127, 55), S(180, -28),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-119, -288), S(-69, -184), S(-9, -117), S(4, -60), S(41, -29), S(55, -6), S(77, 4), S(84, 16), S(90, 26), S(92, 23), S(121, 8), S(164, -39), S(200, -44), S(266, -67),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-217, -323), S(-83, -115), S(-35, -40), S(-14, -47), S(-3, -8), S(12, 10), S(30, 15), S(56, 13), S(81, 23), S(110, 29), S(135, 30), S(147, 35), S(191, 21), S(183, 20), S(273, -68),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(64, 100), S(-625, 530), S(-225, -395), S(-165, -217), S(-120, -237), S(-78, -201), S(-112, -9), S(-92, -40), S(-76, -4), S(-76, 22), S(-62, 32), S(-62, 68), S(-40, 53), S(-27, 52), S(-21, 58), S(-4, 46), S(-20, 67), S(6, 25), S(16, 22), S(52, -38), S(90, -80), S(110, -137), S(220, -225), S(419, -405), S(379, -415), S(951, -704), S(732, -638), S(1392, -1013),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(401, 801), S(79, 447), S(15, 487), S(16, 514), S(0, 503), S(-26, 486), S(-4, 492), S(6, 460), S(54, 338),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -36), S(155, -90),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(20, 2), S(130, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -63), S(85, -78), S(135, -77), S(145, -126),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-50, 33), S(-71, 51), S(12, -29), S(173, -121), S(436, -277),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-123, 489),   S(14, 499),     S(166, 431),    S(332, 210),    S(272, 229),    S(292, 316),    S(169, 366),    S(212, 355),    //
    S(9, -2),       S(184, 21),     S(118, -63),    S(148, -165),   S(74, -167),    S(22, -91),     S(-29, -8),     S(-59, -11),    //
    S(-49, -66),    S(-23, -63),    S(-30, -108),   S(-33, -143),   S(-48, -142),   S(-93, -140),   S(-108, -67),   S(-136, -45),   //
    S(-42, -143),   S(-16, -107),   S(-51, -151),   S(-50, -154),   S(-71, -164),   S(-102, -141),  S(-142, -71),   S(-161, -89),   //
    S(-37, -177),   S(28, -172),    S(-32, -132),   S(-92, -119),   S(-82, -141),   S(-135, -137),  S(-140, -109),  S(-175, -110),  //
    S(-32, -179),   S(123, -176),   S(41, -136),    S(-59, -95),    S(-78, -149),   S(-101, -131),  S(-117, -87),   S(-154, -104),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-414, -159),  S(-82, -67),    S(-540, 323),   S(-16, 58),     S(-336, 157),   S(-339, 176),   S(-404, -9),    S(-557, 50),    //
    S(94, -16),     S(111, 64),     S(289, -81),    S(71, 78),      S(145, 35),     S(110, -4),     S(-9, 27),      S(47, -42),     //
    S(39, 33),      S(35, 118),     S(241, 62),     S(137, 100),    S(196, 50),     S(63, 70),      S(78, 24),      S(-57, 14),     //
    S(119, 51),     S(33, 106),     S(93, 107),     S(68, 128),     S(88, 84),      S(78, 90),      S(3, 31),       S(18, 48),      //
    S(89, 28),      S(101, 37),     S(77, 85),      S(44, 72),      S(44, 88),      S(52, 90),      S(11, 29),      S(31, -62),     //
    S(-7, -22),     S(28, -29),     S(8, -17),      S(32, 54),      S(52, 51),      S(-31, 3),      S(-20, -9),     S(-70, -10),    //
    S(14, 83),      S(44, -27),     S(0, -16),      S(-8, 9),       S(-16, 2),      S(-31, -32),    S(-20, -55),    S(-118, -111),  //
    S(-45, -8),     S(2, -19),      S(58, -99),     S(36, -25),     S(68, -40),     S(9, -144),     S(-44, -48),    S(-167, -54),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-88, 112),    S(-50, 25),     S(-564, 131),   S(-261, 118),   S(-316, 138),   S(-395, 145),   S(-10, 76),     S(-31, 52),     //
    S(26, -44),     S(45, 64),      S(38, 55),      S(90, 0),       S(55, 27),      S(24, 53),      S(28, 33),      S(-58, 53),     //
    S(13, 79),      S(75, 76),      S(289, 33),     S(149, 32),     S(105, 40),     S(42, 84),      S(141, 32),     S(-6, 94),      //
    S(17, 28),      S(59, 62),      S(143, 40),     S(146, 50),     S(148, 58),     S(64, 78),      S(70, 39),      S(-32, 58),     //
    S(36, -21),     S(39, 42),      S(49, 45),      S(101, 52),     S(103, 85),     S(23, 79),      S(44, 10),      S(35, -56),     //
    S(70, -32),     S(100, 5),      S(101, 7),      S(24, 59),      S(22, 66),      S(15, 75),      S(75, 10),      S(48, -50),     //
    S(27, -51),     S(101, -22),    S(46, -19),     S(23, 25),      S(15, -6),      S(55, -27),     S(-4, 16),      S(72, -110),    //
    S(53, -11),     S(18, 5),       S(16, 15),      S(18, -37),     S(2, -34),      S(24, 2),       S(38, -68),     S(-46, 16),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(111, 35),     S(182, 39),     S(102, 81),     S(70, 97),      S(104, 61),     S(62, 59),      S(82, 60),      S(91, 60),      //
    S(120, 76),     S(168, 69),     S(231, 50),     S(161, 95),     S(148, 97),     S(69, 110),     S(35, 107),     S(57, 96),      //
    S(39, 76),      S(286, 19),     S(243, 26),     S(266, 0),      S(166, 44),     S(79, 74),      S(135, 42),     S(-14, 92),     //
    S(10, 53),      S(51, 55),      S(75, 50),      S(120, -5),     S(86, 28),      S(28, 80),      S(4, 76),       S(-71, 67),     //
    S(-121, 16),    S(-5, 11),      S(-15, 26),     S(-21, 30),     S(-18, 20),     S(-54, 79),     S(-102, 80),    S(-120, 55),    //
    S(-114, 5),     S(-3, -73),     S(-23, -32),    S(-62, -9),     S(-24, -34),    S(-117, 30),    S(-111, 9),     S(-110, -6),    //
    S(-171, 19),    S(-89, -42),    S(-38, -54),    S(-35, -39),    S(-54, -20),    S(-61, -22),    S(-117, -32),   S(-120, -33),   //
    S(-125, 3),     S(-98, 13),     S(-53, -25),    S(-18, -40),    S(-30, -21),    S(-39, -26),    S(-56, -39),    S(-83, -21),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(61, 81),      S(65, 62),      S(90, 63),      S(-99, 235),    S(-2, 121),     S(-58, 153),    S(48, 39),      S(-12, 33),     //
    S(89, 59),      S(-82, 252),    S(-60, 317),    S(-133, 317),   S(-96, 248),    S(-146, 267),   S(-63, 135),    S(-8, 26),      //
    S(-37, 182),    S(86, 169),     S(48, 204),     S(-29, 275),    S(-26, 198),    S(-85, 226),    S(14, 99),      S(-10, 11),     //
    S(45, 79),      S(17, 161),     S(22, 177),     S(-7, 239),     S(-16, 215),    S(-8, 130),     S(1, 55),       S(-21, 46),     //
    S(28, 96),      S(45, 76),      S(26, 123),     S(-9, 180),     S(-23, 183),    S(-24, 139),    S(-17, 38),     S(-13, -29),    //
    S(58, -146),    S(55, -25),     S(37, 61),      S(-41, 125),    S(7, 45),       S(-8, 62),      S(26, -58),     S(-6, -52),     //
    S(58, -260),    S(38, -308),    S(18, -122),    S(38, -41),     S(-6, 1),       S(53, -138),    S(28, -48),     S(-14, -39),    //
    S(-86, -68),    S(-80, -348),   S(-21, -301),   S(14, -208),    S(42, -119),    S(65, -218),    S(44, -167),    S(-12, -64),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(480, -718),   S(267, -129),   S(-32, -26),    S(-152, 47),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(358, -172),   S(17, 132),     S(-52, 154),    S(285, 65),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-18, 38),     S(107, 157),    S(167, 116),    S(233, 51),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-234, 63),    S(-7, 122),     S(135, 116),    S(109, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-198, 1),     S(-34, 72),     S(24, 77),      S(-28, 121),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-138, -40),   S(65, -9),      S(-43, 61),     S(-89, 105),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(78, -120),    S(113, -47),    S(-4, 22),      S(-120, 84),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-31, -184),   S(72, -141),    S(-60, -98),    S(-28, -127),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
