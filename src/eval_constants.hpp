#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(295, 452);
inline const PParam KNIGHT_MAT = S(1003, 979);
inline const PParam BISHOP_MAT = S(1040, 1069);
inline const PParam ROOK_MAT   = S(1536, 1788);
inline const PParam QUEEN_MAT  = S(3372, 3240);
inline const PParam TEMPO_VAL  = S(27, 17);

inline const PParam BISHOP_PAIR_VAL     = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL    = S(-52, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-72, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(-2, 21), S(55, 26), S(81, 71), S(187, 148), S(566, 524), S(1603, 1557),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(48, 21), S(52, 36), S(98, 109), S(621, -120),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(5, 0), S(-20, 32), S(-25, 81), S(44, 131), S(73, 232), S(47, 31),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-204, -166), S(-93, -124), S(-41, -28), S(8, -3), S(55, 17), S(73, 60), S(106, 56), S(128, 54), S(182, -30),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-128, -300), S(-79, -193), S(-18, -126), S(-4, -69), S(32, -38), S(47, -15), S(68, -5), S(76, 7), S(81, 16), S(83, 13), S(113, -1), S(157, -49), S(186, -50), S(244, -71),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-216, -310), S(-84, -112), S(-36, -37), S(-14, -44), S(-3, -5), S(11, 13), S(30, 17), S(57, 15), S(81, 25), S(111, 30), S(136, 32), S(148, 36), S(193, 22), S(185, 21), S(275, -67),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(28, 82), S(-613, 382), S(-230, -370), S(-161, -235), S(-128, -206), S(-78, -206), S(-112, -10), S(-92, -42), S(-76, -6), S(-76, 20), S(-62, 30), S(-61, 66), S(-40, 51), S(-27, 50), S(-20, 56), S(-3, 44), S(-19, 65), S(7, 23), S(18, 20), S(53, -40), S(94, -84), S(111, -138), S(242, -244), S(407, -396), S(401, -431), S(938, -697), S(725, -640), S(1516, -1078),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(427, 818), S(81, 443), S(17, 485), S(17, 512), S(0, 501), S(-25, 485), S(-4, 490), S(6, 458), S(54, 337),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -36), S(154, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(19, 3), S(130, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -62), S(84, -78), S(134, -76), S(133, -120),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-51, 34), S(-72, 53), S(11, -27), S(174, -121), S(456, -293),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-127, 481),   S(14, 489),     S(165, 424),    S(329, 204),    S(269, 224),    S(293, 307),    S(159, 364),    S(205, 351),    //
    S(7, -5),       S(183, 16),     S(116, -65),    S(145, -166),   S(70, -168),    S(18, -92),     S(-33, -10),    S(-63, -13),    //
    S(-52, -69),    S(-26, -66),    S(-33, -110),   S(-36, -145),   S(-52, -143),   S(-97, -141),   S(-112, -69),   S(-140, -47),   //
    S(-45, -145),   S(-18, -110),   S(-54, -153),   S(-54, -156),   S(-74, -166),   S(-106, -143),  S(-146, -73),   S(-165, -91),   //
    S(-41, -179),   S(26, -174),    S(-34, -135),   S(-95, -122),   S(-85, -144),   S(-139, -139),  S(-144, -111),  S(-179, -111),  //
    S(-36, -181),   S(121, -178),   S(39, -139),    S(-62, -98),    S(-81, -151),   S(-105, -133),  S(-121, -89),   S(-159, -105),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-450, -126),  S(-133, -40),   S(-530, 320),   S(-18, 62),     S(-361, 172),   S(-333, 176),   S(-476, 20),    S(-604, 103),   //
    S(98, -17),     S(122, 59),     S(301, -87),    S(75, 77),      S(151, 33),     S(112, -2),     S(-8, 29),      S(46, -38),     //
    S(48, 28),      S(40, 117),     S(246, 61),     S(143, 99),     S(201, 50),     S(65, 72),      S(81, 24),      S(-54, 15),     //
    S(123, 50),     S(35, 106),     S(96, 107),     S(70, 128),     S(91, 84),      S(80, 91),      S(5, 32),       S(20, 49),      //
    S(91, 28),      S(105, 36),     S(79, 86),      S(47, 73),      S(46, 89),      S(54, 91),      S(14, 29),      S(32, -61),     //
    S(-6, -21),     S(30, -27),     S(10, -15),     S(35, 55),      S(54, 52),      S(-30, 6),      S(-18, -7),     S(-68, -8),     //
    S(16, 84),      S(45, -25),     S(1, -15),      S(-7, 11),      S(-14, 4),      S(-29, -30),    S(-16, -58),    S(-109, -122),  //
    S(-26, -29),    S(3, -16),      S(60, -99),     S(38, -24),     S(71, -39),     S(14, -146),    S(-44, -46),    S(-160, -64),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-74, 97),     S(-57, 20),     S(-582, 128),   S(-245, 104),   S(-318, 129),   S(-353, 123),   S(-19, 70),     S(-54, 59),     //
    S(21, -51),     S(37, 59),      S(33, 49),      S(85, -6),      S(53, 19),      S(17, 47),      S(21, 27),      S(-63, 46),     //
    S(9, 71),       S(72, 67),      S(287, 24),     S(146, 24),     S(100, 33),     S(36, 78),      S(135, 26),     S(-13, 88),     //
    S(11, 22),      S(53, 56),      S(138, 33),     S(141, 42),     S(144, 51),     S(59, 72),      S(64, 33),      S(-38, 52),     //
    S(29, -26),     S(33, 36),      S(43, 38),      S(96, 46),      S(98, 78),      S(17, 73),      S(38, 3),       S(29, -61),     //
    S(63, -37),     S(94, 0),       S(95, 1),       S(18, 53),      S(16, 60),      S(9, 69),       S(69, 4),       S(42, -55),     //
    S(21, -58),     S(94, -27),     S(40, -25),     S(17, 19),      S(9, -12),      S(49, -33),     S(-10, 10),     S(68, -118),    //
    S(49, -20),     S(18, -4),      S(9, 10),       S(11, -43),     S(-4, -39),     S(18, -2),      S(34, -75),     S(-52, 10),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(111, 33),     S(171, 42),     S(122, 69),     S(72, 94),      S(107, 57),     S(65, 55),      S(83, 57),      S(95, 56),      //
    S(121, 73),     S(173, 64),     S(235, 45),     S(164, 91),     S(151, 93),     S(70, 107),     S(36, 104),     S(58, 93),      //
    S(44, 71),      S(290, 14),     S(247, 21),     S(270, -4),     S(167, 41),     S(80, 71),      S(136, 39),     S(-14, 89),     //
    S(11, 50),      S(52, 52),      S(76, 47),      S(121, -9),     S(87, 25),      S(28, 77),      S(4, 73),       S(-71, 65),     //
    S(-122, 15),    S(-5, 9),       S(-14, 23),     S(-20, 28),     S(-18, 17),     S(-54, 77),     S(-102, 78),    S(-121, 54),    //
    S(-115, 3),     S(-3, -75),     S(-23, -34),    S(-62, -11),    S(-24, -37),    S(-117, 28),    S(-111, 7),     S(-111, -8),    //
    S(-173, 19),    S(-89, -44),    S(-39, -56),    S(-35, -41),    S(-55, -22),    S(-61, -24),    S(-117, -34),   S(-121, -35),   //
    S(-127, 2),     S(-99, 12),     S(-54, -27),    S(-18, -42),    S(-31, -23),    S(-39, -27),    S(-57, -40),    S(-84, -21),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(64, 73),      S(60, 65),      S(115, 38),     S(-112, 245),   S(-12, 128),    S(-57, 148),    S(49, 35),      S(-2, 16),      //
    S(94, 48),      S(-80, 246),    S(-62, 317),    S(-126, 305),   S(-92, 240),    S(-150, 270),   S(-63, 131),    S(-8, 21),      //
    S(-33, 171),    S(92, 159),     S(55, 192),     S(-34, 279),    S(-21, 187),    S(-85, 223),    S(15, 94),      S(-10, 7),      //
    S(47, 73),      S(16, 162),     S(23, 172),     S(-7, 236),     S(-16, 211),    S(-11, 132),    S(0, 53),       S(-22, 46),     //
    S(26, 98),      S(44, 75),      S(26, 121),     S(-9, 177),     S(-24, 181),    S(-25, 137),    S(-20, 40),     S(-14, -30),    //
    S(55, -141),    S(56, -28),     S(36, 59),      S(-41, 124),    S(6, 43),       S(-9, 61),      S(25, -59),     S(-3, -61),     //
    S(67, -283),    S(34, -302),    S(17, -123),    S(38, -43),     S(-7, 0),       S(52, -140),    S(28, -51),     S(-16, -41),    //
    S(-84, -73),    S(-99, -325),   S(-24, -299),   S(10, -203),    S(41, -120),    S(65, -221),    S(50, -185),    S(-9, -75),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(464, -708),   S(232, -114),   S(53, -45),     S(-58, 27),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(372, -172),   S(73, 119),     S(-39, 151),    S(334, 55),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(20, 30),      S(121, 154),    S(186, 113),    S(284, 40),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-233, 65),    S(2, 120),      S(155, 112),    S(137, 71),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-194, 3),     S(-27, 72),     S(29, 78),      S(-16, 120),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-137, -37),   S(68, -8),      S(-39, 62),     S(-84, 106),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(81, -118),    S(116, -46),    S(-1, 24),      S(-117, 85),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-30, -181),   S(74, -139),    S(-58, -96),    S(-26, -125),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
