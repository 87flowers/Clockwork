#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(176, 185);
inline const PParam KNIGHT_MAT = S(810, 707);
inline const PParam BISHOP_MAT = S(791, 589);
inline const PParam ROOK_MAT   = S(740, 767);
inline const PParam QUEEN_MAT  = S(1704, 1330);
inline const PParam TEMPO_VAL  = S(34, 16);

inline const PParam BISHOP_PAIR_VAL  = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL = S(-50, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(54, 25), S(80, 70), S(186, 148), S(536, 535), S(1323, 1490),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(49, 21), S(55, 35), S(101, 109), S(630, -122),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(4, 0), S(-20, 33), S(-27, 82), S(45, 130), S(73, 232), S(170, 338),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-82, 20), S(27, 65), S(83, 160), S(134, 185), S(182, 207), S(202, 250), S(236, 245), S(259, 244), S(314, 160),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(38, 13), S(87, 117), S(147, 185), S(161, 242), S(198, 272), S(212, 295), S(234, 306), S(240, 319), S(246, 327), S(247, 325), S(277, 310), S(319, 261), S(357, 254), S(415, 235),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(194, 249), S(307, 460), S(355, 536), S(377, 528), S(388, 568), S(404, 586), S(423, 591), S(449, 589), S(474, 599), S(504, 604), S(529, 606), S(541, 610), S(586, 597), S(578, 595), S(668, 507),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(0, 0), S(797, 370), S(785, 687), S(851, 848), S(877, 900), S(927, 908), S(891, 1103), S(911, 1076), S(926, 1111), S(927, 1137), S(940, 1149), S(940, 1185), S(961, 1171), S(974, 1171), S(981, 1176), S(998, 1164), S(982, 1186), S(1008, 1145), S(1018, 1143), S(1054, 1080), S(1090, 1042), S(1104, 991), S(1230, 889), S(1402, 733), S(1393, 701), S(1777, 536), S(1377, 698), S(1331, 722),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(386, 348), S(79, -35), S(15, 6), S(15, 33), S(-2, 23), S(-29, 6), S(-7, 11), S(1, -19), S(50, -141),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -37), S(156, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(18, 3), S(125, -38),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(66, -63), S(84, -77), S(133, -76), S(132, -121),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-51, 34), S(-73, 52), S(9, -27), S(171, -121), S(448, -290),
};

inline const PParam PAWN_THREAT_KNIGHT = S(180, 72);
inline const PParam PAWN_THREAT_BISHOP = S(163, 64);
inline const PParam PAWN_THREAT_ROOK   = S(137, 51);
inline const PParam PAWN_THREAT_QUEEN  = S(110, -56);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-132, 441),   S(-11, 457),    S(153, 384),    S(313, 166),    S(252, 187),    S(277, 271),    S(148, 323),    S(201, 309),    //
    S(124, 261),    S(299, 283),    S(228, 202),    S(258, 101),    S(183, 99),     S(131, 175),    S(83, 256),     S(55, 252),     //
    S(63, 197),     S(86, 200),     S(80, 156),     S(75, 123),     S(59, 124),     S(16, 125),     S(0, 198),      S(-23, 219),    //
    S(73, 119),     S(95, 156),     S(62, 112),     S(62, 109),     S(42, 99),      S(10, 122),     S(-31, 193),    S(-46, 174),    //
    S(76, 86),      S(144, 91),     S(82, 130),     S(23, 143),     S(32, 122),     S(-20, 126),    S(-26, 154),    S(-62, 154),    //
    S(83, 84),      S(239, 87),     S(157, 126),    S(56, 167),     S(37, 114),     S(13, 133),     S(-2, 176),     S(-40, 160),    //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-374, -50),   S(-59, 36),     S(-465, 400),   S(56, 135),     S(-299, 254),   S(-277, 260),   S(-405, 107),   S(-528, 168),   //
    S(164, 65),     S(191, 140),    S(364, -5),     S(138, 158),    S(216, 114),    S(178, 78),     S(57, 110),     S(113, 42),     //
    S(120, 109),    S(112, 195),    S(316, 139),    S(210, 178),    S(264, 130),    S(132, 150),    S(152, 103),    S(18, 94),      //
    S(196, 130),    S(114, 186),    S(171, 185),    S(139, 209),    S(160, 164),    S(151, 170),    S(80, 113),     S(92, 129),     //
    S(162, 109),    S(183, 116),    S(152, 166),    S(119, 153),    S(119, 168),    S(127, 170),    S(88, 110),     S(104, 18),     //
    S(64, 59),      S(101, 52),     S(78, 64),      S(103, 135),    S(122, 132),    S(37, 85),      S(50, 72),      S(1, 72),       //
    S(85, 166),     S(117, 55),     S(70, 63),      S(59, 91),      S(52, 83),      S(37, 49),      S(52, 24),      S(-49, -26),    //
    S(35, 62),      S(72, 65),      S(131, -19),    S(107, 56),     S(140, 41),     S(81, -63),     S(23, 36),      S(-85, 19),     //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(0, 268),      S(17, 191),     S(-490, 294),   S(-182, 279),   S(-239, 299),   S(-279, 294),   S(76, 235),     S(40, 218),     //
    S(105, 117),    S(134, 222),    S(119, 216),    S(177, 158),    S(142, 185),    S(105, 214),    S(109, 195),    S(22, 215),     //
    S(111, 231),    S(169, 232),    S(386, 188),    S(237, 190),    S(191, 199),    S(130, 243),    S(228, 192),    S(82, 252),     //
    S(106, 187),    S(153, 220),    S(236, 198),    S(236, 209),    S(237, 218),    S(153, 238),    S(160, 200),    S(51, 220),     //
    S(118, 140),    S(126, 204),    S(136, 206),    S(189, 213),    S(191, 245),    S(109, 240),    S(130, 171),    S(119, 103),    //
    S(152, 128),    S(183, 166),    S(185, 168),    S(107, 220),    S(104, 228),    S(98, 236),     S(157, 172),    S(130, 110),    //
    S(107, 109),    S(183, 138),    S(131, 140),    S(104, 186),    S(96, 154),     S(136, 134),    S(75, 178),     S(153, 49),     //
    S(140, 144),    S(103, 165),    S(94, 179),     S(99, 123),     S(82, 126),     S(103, 164),    S(117, 94),     S(36, 176),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(527, 474),    S(577, 487),    S(521, 518),    S(478, 538),    S(516, 501),    S(475, 499),    S(493, 501),    S(501, 502),    //
    S(528, 517),    S(580, 509),    S(643, 490),    S(570, 536),    S(558, 538),    S(476, 552),    S(444, 549),    S(466, 538),    //
    S(453, 515),    S(700, 459),    S(657, 465),    S(678, 440),    S(576, 485),    S(487, 516),    S(545, 483),    S(393, 534),    //
    S(421, 494),    S(466, 495),    S(488, 491),    S(531, 435),    S(496, 470),    S(438, 522),    S(416, 517),    S(336, 510),    //
    S(285, 460),    S(410, 452),    S(396, 468),    S(390, 472),    S(393, 461),    S(355, 521),    S(309, 522),    S(287, 498),    //
    S(293, 448),    S(409, 367),    S(386, 410),    S(348, 432),    S(385, 407),    S(292, 472),    S(298, 451),    S(297, 436),    //
    S(236, 463),    S(320, 399),    S(369, 388),    S(372, 403),    S(353, 422),    S(345, 420),    S(290, 410),    S(288, 408),    //
    S(279, 447),    S(308, 456),    S(352, 417),    S(388, 402),    S(376, 420),    S(367, 416),    S(350, 403),    S(321, 422),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(735, 863),    S(724, 860),    S(784, 829),    S(564, 1029),   S(664, 912),    S(614, 937),    S(710, 834),    S(665, 809),    //
    S(765, 839),    S(592, 1032),   S(609, 1105),   S(550, 1087),   S(580, 1026),   S(524, 1054),   S(606, 923),    S(664, 810),    //
    S(635, 966),    S(767, 945),    S(721, 987),    S(642, 1060),   S(650, 975),    S(586, 1011),   S(685, 886),    S(661, 795),    //
    S(720, 863),    S(694, 944),    S(698, 957),    S(669, 1018),   S(657, 997),    S(662, 918),    S(676, 837),    S(650, 831),    //
    S(700, 883),    S(721, 859),    S(699, 909),    S(665, 963),    S(651, 966),    S(647, 925),    S(652, 827),    S(658, 755),    //
    S(727, 645),    S(730, 758),    S(709, 847),    S(631, 911),    S(679, 831),    S(664, 847),    S(699, 724),    S(667, 727),    //
    S(735, 510),    S(711, 478),    S(691, 661),    S(709, 744),    S(663, 787),    S(724, 647),    S(698, 741),    S(654, 746),    //
    S(577, 727),    S(572, 472),    S(646, 486),    S(681, 582),    S(711, 667),    S(738, 562),    S(718, 611),    S(666, 703),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(350, -653),   S(219, -72),    S(47, -6),      S(-81, 69),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(362, -132),   S(51, 162),     S(-52, 193),    S(330, 94),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-4, 73),      S(108, 195),    S(159, 157),    S(263, 83),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-249, 106),   S(-9, 161),     S(128, 157),    S(108, 116),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-211, 44),    S(-47, 115),    S(10, 120),     S(-38, 163),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-159, 5),     S(48, 34),      S(-58, 104),    S(-104, 148),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(59, -75),     S(96, -3),      S(-20, 66),     S(-138, 128),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-52, -138),   S(52, -96),     S(-80, -53),    S(-49, -81),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
