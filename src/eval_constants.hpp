#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(299, 460);
inline const PParam KNIGHT_MAT = S(1042, 991);
inline const PParam BISHOP_MAT = S(1024, 1094);
inline const PParam ROOK_MAT   = S(1575, 1804);
inline const PParam QUEEN_MAT  = S(3361, 3335);
inline const PParam TEMPO_VAL  = S(28, 17);

inline const PParam BISHOP_PAIR_VAL  = S(72, 195);
inline const PParam DOUBLED_PAWN_VAL = S(-49, -91);

inline const PParam POTENTIAL_CHECKER_VAL = S(-69, -6);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(7, 1), S(60, 20), S(85, 68), S(194, 142), S(730, 293), S(1618, 1521),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 42), S(48, 19), S(55, 44), S(103, 99), S(1196, -277),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(11, 3), S(-24, 24), S(-33, 92), S(49, 124), S(92, 234), S(-23, 68),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-184, -322), S(-54, -113), S(-5, -2), S(24, 39), S(76, 47), S(105, 89), S(124, 83), S(148, 76), S(224, -21),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-112, -234), S(-48, -169), S(23, -129), S(28, -49), S(67, -21), S(76, -3), S(98, 7), S(100, 19), S(103, 37), S(78, 55), S(109, 25), S(176, -37), S(265, -21), S(317, -62),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-267, -311), S(-66, -124), S(-31, -54), S(-22, -35), S(-3, -10), S(15, 8), S(29, 14), S(56, 13), S(71, 38), S(109, 39), S(141, 34), S(153, 40), S(199, 29), S(160, 48), S(248, -50),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(28, 82), S(-1453, 990), S(-182, -733), S(28, -827), S(-151, -70), S(-45, -299), S(-119, 85), S(-52, -40), S(-58, 2), S(-40, 24), S(-47, 67), S(-39, 87), S(-6, 61), S(33, 3), S(33, 24), S(50, 14), S(26, 41), S(30, 28), S(74, 7), S(124, -115), S(169, -160), S(87, -104), S(362, -335), S(426, -377), S(447, -498), S(1122, -804), S(714, -420), S(1472, -982),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(256, 1433), S(48, 464), S(-22, 502), S(-14, 526), S(-28, 511), S(-53, 495), S(-46, 512), S(-14, 465), S(20, 347),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(96, -49), S(172, -103),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(31, -10), S(156, -58),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(73, -67), S(52, -53), S(140, -89), S(158, -115),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-43, 15), S(-62, 25), S(36, -58), S(210, -148), S(446, -287),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-306, 567),   S(53, 502),     S(184, 433),    S(381, 170),    S(380, 185),    S(389, 266),    S(271, 249),    S(278, 296),    //
    S(-8, -9),      S(213, 12),     S(104, -66),    S(113, -182),   S(56, -162),    S(-28, -77),    S(-47, 8),      S(-86, -10),    //
    S(-43, -69),    S(-21, -69),    S(-61, -88),    S(-44, -145),   S(-57, -149),   S(-109, -136),  S(-132, -38),   S(-168, -35),   //
    S(-46, -153),   S(-31, -104),   S(-66, -144),   S(-66, -147),   S(-76, -175),   S(-122, -127),  S(-154, -70),   S(-178, -90),   //
    S(-50, -173),   S(17, -161),    S(-60, -110),   S(-99, -124),   S(-95, -138),   S(-160, -126),  S(-152, -107),  S(-188, -107),  //
    S(-44, -172),   S(113, -162),   S(33, -130),    S(-70, -67),    S(-85, -166),   S(-122, -120),  S(-134, -69),   S(-176, -97),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-559, -104),  S(-262, -12),   S(-710, 296),   S(4, 15),       S(-568, 208),   S(-447, 249),   S(-637, -60),   S(-739, 88),    //
    S(-57, -13),    S(160, -114),   S(270, -189),   S(28, 103),     S(62, 62),      S(-10, 3),      S(0, -59),      S(-20, -14),    //
    S(-113, 86),    S(-9, 116),     S(145, 115),    S(88, 107),     S(113, 77),     S(46, 62),      S(96, -33),     S(-12, -57),    //
    S(0, 90),       S(-52, 160),    S(75, 106),     S(19, 112),     S(49, 41),      S(28, 101),     S(-42, 6),      S(25, -70),     //
    S(41, 5),       S(56, 4),       S(23, 80),      S(-34, 97),     S(18, 62),      S(-13, 93),     S(-8, -10),     S(-25, -83),    //
    S(-29, -54),    S(10, -64),     S(-41, -15),    S(-9, 71),      S(22, 33),      S(-86, 28),     S(-87, -6),     S(-133, 7),     //
    S(-31, 64),     S(2, -70),      S(-37, -12),    S(-48, -8),     S(-64, 0),      S(-54, -55),    S(68, -227),    S(-264, 3),     //
    S(-253, 121),   S(-78, 14),     S(7, -115),     S(0, -33),      S(-5, -84),     S(-133, -91),   S(-105, -82),   S(-481, 90),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-205, 143),   S(145, -56),    S(-676, 193),   S(-339, 157),   S(-625, 228),   S(-648, 231),   S(43, 91),      S(-168, 64),    //
    S(127, -189),   S(-27, 64),     S(107, 1),      S(75, -27),     S(-33, 74),     S(56, 10),      S(104, -18),    S(-83, 16),     //
    S(14, 62),      S(60, 98),      S(271, 35),     S(107, 51),     S(54, 39),      S(-9, 100),     S(133, 36),     S(-8, 58),      //
    S(-13, 78),     S(40, 50),      S(129, 50),     S(140, 38),     S(155, 53),     S(43, 95),      S(113, -43),    S(-23, 47),     //
    S(47, -60),     S(56, 42),      S(86, -5),      S(83, 57),      S(94, 79),      S(51, 63),      S(36, -20),     S(3, -71),      //
    S(66, -19),     S(53, 53),      S(101, 10),     S(16, 51),      S(27, 60),      S(24, 57),      S(58, 13),      S(3, -41),      //
    S(89, -160),    S(101, -53),    S(101, -84),    S(31, -9),      S(20, -28),     S(24, -30),     S(-15, -8),     S(134, -171),   //
    S(55, -16),     S(-108, 110),   S(31, -27),     S(39, -77),     S(-9, -59),     S(27, -27),     S(-47, -29),    S(-137, 82),    //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(122, 36),     S(135, 55),     S(30, 107),     S(113, 83),     S(176, -2),     S(-111, 148),   S(11, 106),     S(62, 78),      //
    S(107, 88),     S(126, 131),    S(239, 44),     S(117, 120),    S(138, 91),     S(54, 122),     S(-1, 138),     S(31, 116),     //
    S(6, 125),      S(190, 25),     S(227, 22),     S(218, 36),     S(137, 77),     S(47, 92),      S(102, 57),     S(-88, 125),    //
    S(-2, 43),      S(46, 29),      S(113, 33),     S(94, -10),     S(45, 49),      S(0, 105),      S(-39, 102),    S(-95, 75),     //
    S(-201, 76),    S(-54, 28),     S(-24, 3),      S(-67, 78),     S(-42, 6),      S(-41, 61),     S(-164, 115),   S(-167, 79),    //
    S(-133, 12),    S(-41, -40),    S(-43, -31),    S(-69, -16),    S(-24, -53),    S(-117, 14),    S(-97, -12),    S(-161, 44),    //
    S(-212, 35),    S(-164, 46),    S(-76, -10),    S(-37, -57),    S(-73, -20),    S(-97, -9),     S(-118, -36),   S(-180, 26),    //
    S(-147, -3),    S(-107, 24),    S(-73, -9),     S(-30, -38),    S(-50, -9),     S(-69, -6),     S(-62, -58),    S(-107, -12),   //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(37, 136),     S(140, 70),     S(112, -33),    S(-253, 425),   S(-36, 93),     S(-84, 212),    S(77, -27),     S(154, -203),   //
    S(12, 151),     S(-77, 208),    S(-145, 368),   S(-131, 261),   S(-123, 287),   S(-196, 321),   S(-22, 74),     S(58, -37),     //
    S(-101, 242),   S(126, 132),    S(-22, 244),    S(-28, 267),    S(-186, 341),   S(-131, 285),   S(-23, 119),    S(14, -31),     //
    S(61, 15),      S(63, 22),      S(18, 208),     S(-21, 258),    S(17, 176),     S(-32, 162),    S(-6, 53),      S(-51, 156),    //
    S(13, 70),      S(22, 104),     S(-43, 224),    S(-19, 174),    S(-24, 183),    S(-23, 122),    S(-56, 72),     S(0, -92),      //
    S(52, -189),    S(-4, 69),      S(-8, 129),     S(-50, 113),    S(-22, 56),     S(-15, 12),     S(12, -39),     S(-36, -35),    //
    S(163, -423),   S(-22, -267),   S(21, -210),    S(11, -44),     S(-28, -6),     S(1, -23),      S(6, -76),      S(-53, -90),    //
    S(72, -69),     S(127, -900),   S(-71, -297),   S(-50, -103),   S(24, -107),    S(43, -155),    S(-18, -123),   S(-29, -44),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(669, -899),   S(279, -107),   S(-7, -5),      S(-54, 65),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(258, -90),    S(-104, 181),   S(-89, 155),    S(208, 98),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-134, 103),   S(166, 167),    S(167, 117),    S(228, 82),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-354, 96),    S(-192, 152),   S(53, 154),     S(125, 73),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-164, 20),    S(-27, 77),     S(104, 56),     S(-76, 130),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-141, -17),   S(75, -5),      S(7, 43),       S(-72, 104),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(119, -131),   S(153, -67),    S(37, 1),       S(-100, 79),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(6, -197),     S(109, -163),   S(-38, -108),   S(-11, -110),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
