#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
//Epoch 21/1000
//[========================================] 100% (8/8)
inline const PScore PAWN_MAT   = S(142, 93);
inline const PScore KNIGHT_MAT = S(704, 780);
inline const PScore BISHOP_MAT = S(757, 639);
inline const PScore ROOK_MAT   = S(940, 885);
inline const PScore QUEEN_MAT  = S(2058, 1343);
inline const PScore TEMPO_VAL  = S(47, 17);

inline const PScore BISHOP_PAIR_VAL  = S(60, 188);
inline const PScore DOUBLED_PAWN_VAL = S(-62, -88);

inline const PScore POTENTIAL_CHECKER_VAL = S(-73, 0);

inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(-1, 24), S(53, 20), S(86, 66), S(160, 107), S(509, 547), S(1559, 1600),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(54, 46), S(47, 24), S(60, 24), S(102, 114), S(636, -124),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(3, 1), S(-17, 33), S(-31, 82), S(41, 128), S(72, 234), S(193, 397),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-35, -13), S(96, 29), S(136, 117), S(184, 151), S(236, 171), S(269, 214), S(305, 206), S(327, 207), S(365, 114),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(22, -49), S(84, 78), S(146, 137), S(150, 196), S(178, 220), S(200, 244), S(233, 269), S(226, 273), S(235, 279), S(235, 279), S(264, 254), S(315, 217), S(369, 215), S(432, 185),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(62, 214), S(201, 446), S(240, 509), S(265, 514), S(284, 556), S(293, 568), S(318, 568), S(348, 573), S(361, 574), S(400, 591), S(422, 582), S(436, 588), S(485, 585), S(469, 585), S(558, 488),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(0, 0), S(599, 343), S(518, 911), S(598, 1026), S(630, 1063), S(678, 1090), S(635, 1281), S(645, 1241), S(666, 1273), S(682, 1307), S(691, 1313), S(688, 1362), S(698, 1332), S(709, 1330), S(729, 1348), S(736, 1325), S(729, 1347), S(753, 1302), S(768, 1307), S(800, 1247), S(836, 1201), S(840, 1162), S(957, 1058), S(1122, 917), S(1112, 880), S(1415, 773), S(1238, 797), S(1205, 810),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(425, 398), S(85, -2), S(27, 54), S(25, 79), S(9, 67), S(-16, 50), S(1, 58), S(11, 25), S(54, -94),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(92, -36), S(144, -100),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(26, 11), S(139, -44),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(62, -60), S(82, -75), S(133, -74), S(128, -115),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-61, 28), S(-75, 52), S(7, -24), S(158, -115), S(416, -262),
};

inline const PScore PAWN_THREAT_KNIGHT = S(174, 80);
inline const PScore PAWN_THREAT_BISHOP = S(164, 86);
inline const PScore PAWN_THREAT_ROOK   = S(157, 67);
inline const PScore PAWN_THREAT_QUEEN  = S(128, -70);

inline const PScore KNIGHT_THREAT_BISHOP = S(88, 70);
inline const PScore KNIGHT_THREAT_ROOK   = S(210, -20);
inline const PScore KNIGHT_THREAT_QUEEN  = S(138, -110);

inline const PScore BISHOP_THREAT_KNIGHT = S(93, 24);
inline const PScore BISHOP_THREAT_ROOK   = S(204, 23);
inline const PScore BISHOP_THREAT_QUEEN  = S(131, -2);

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-132, 491),   S(-3, 512),     S(157, 436),    S(320, 222),    S(262, 230),    S(291, 322),    S(153, 365),    S(211, 356),    //
    S(150, 356),    S(337, 387),    S(262, 303),    S(298, 208),    S(220, 197),    S(163, 271),    S(136, 353),    S(90, 352),     //
    S(89, 306),     S(119, 292),    S(127, 255),    S(102, 213),    S(90, 219),     S(55, 213),     S(30, 293),     S(14, 318),     //
    S(110, 215),    S(138, 262),    S(100, 226),    S(94, 205),     S(82, 198),     S(45, 216),     S(-5, 290),     S(-7, 262),     //
    S(114, 175),    S(194, 191),    S(135, 228),    S(56, 251),     S(60, 213),     S(5, 225),      S(16, 250),     S(-19, 253),    //
    S(116, 180),    S(275, 180),    S(191, 223),    S(75, 271),     S(63, 214),     S(43, 234),     S(30, 269),     S(2, 262),      //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-280, -53),   S(10, 22),      S(-436, 394),   S(61, 136),     S(-222, 258),   S(-221, 267),   S(-351, 111),   S(-466, 148),   //
    S(192, 58),     S(231, 128),    S(352, -6),     S(165, 146),    S(219, 110),    S(125, 85),     S(78, 91),      S(147, 53),     //
    S(167, 107),    S(129, 193),    S(340, 138),    S(206, 175),    S(292, 126),    S(171, 142),    S(158, 97),     S(64, 94),      //
    S(236, 105),    S(169, 184),    S(193, 144),    S(196, 192),    S(221, 168),    S(205, 145),    S(129, 113),    S(156, 104),    //
    S(210, 104),    S(250, 124),    S(208, 139),    S(183, 143),    S(185, 143),    S(179, 161),    S(151, 110),    S(163, 21),     //
    S(138, 54),     S(154, 40),     S(139, 46),     S(181, 143),    S(180, 123),    S(102, 79),     S(100, 47),     S(40, 35),      //
    S(134, 159),    S(198, 52),     S(129, 38),     S(121, 87),     S(104, 65),     S(94, 43),      S(94, 14),      S(-2, -34),     //
    S(88, 25),      S(140, 56),     S(190, -30),    S(168, 56),     S(185, 17),     S(121, -66),    S(75, 26),      S(-38, 7),      //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(34, 278),     S(29, 209),     S(-462, 331),   S(-167, 311),   S(-212, 313),   S(-255, 323),   S(79, 266),     S(79, 248),     //
    S(149, 139),    S(97, 222),     S(166, 267),    S(146, 197),    S(150, 231),    S(109, 228),    S(74, 197),     S(90, 286),     //
    S(119, 253),    S(184, 254),    S(377, 209),    S(223, 213),    S(182, 217),    S(119, 283),    S(259, 237),    S(107, 295),    //
    S(131, 203),    S(123, 256),    S(241, 233),    S(243, 257),    S(254, 254),    S(168, 252),    S(165, 238),    S(99, 261),     //
    S(133, 178),    S(134, 224),    S(159, 221),    S(201, 248),    S(203, 270),    S(117, 244),    S(140, 195),    S(158, 131),    //
    S(183, 152),    S(197, 207),    S(214, 195),    S(129, 242),    S(138, 255),    S(128, 248),    S(191, 194),    S(132, 123),    //
    S(131, 131),    S(199, 143),    S(140, 150),    S(129, 207),    S(134, 161),    S(175, 169),    S(116, 195),    S(171, 66),     //
    S(165, 153),    S(128, 181),    S(137, 194),    S(134, 152),    S(115, 142),    S(141, 185),    S(156, 112),    S(79, 205),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(424, 410),    S(502, 425),    S(417, 454),    S(392, 469),    S(433, 446),    S(390, 440),    S(405, 443),    S(397, 425),    //
    S(438, 454),    S(486, 447),    S(558, 416),    S(471, 467),    S(462, 474),    S(375, 489),    S(359, 493),    S(380, 480),    //
    S(370, 454),    S(600, 399),    S(567, 397),    S(591, 375),    S(483, 418),    S(394, 453),    S(457, 421),    S(312, 465),    //
    S(333, 432),    S(347, 429),    S(392, 425),    S(448, 364),    S(412, 393),    S(372, 472),    S(331, 459),    S(251, 448),    //
    S(191, 380),    S(323, 390),    S(342, 419),    S(302, 404),    S(298, 380),    S(271, 465),    S(205, 464),    S(178, 419),    //
    S(215, 397),    S(306, 306),    S(310, 341),    S(272, 361),    S(300, 342),    S(215, 411),    S(227, 400),    S(208, 384),    //
    S(139, 409),    S(223, 329),    S(265, 310),    S(277, 341),    S(266, 357),    S(278, 370),    S(230, 380),    S(198, 325),    //
    S(182, 373),    S(211, 391),    S(251, 368),    S(300, 339),    S(287, 367),    S(276, 346),    S(227, 332),    S(224, 356),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(512, 850),    S(515, 834),    S(585, 802),    S(358, 992),    S(463, 882),    S(404, 910),    S(473, 799),    S(457, 781),    //
    S(554, 808),    S(368, 1015),   S(403, 1077),   S(336, 1066),   S(359, 992),    S(315, 1028),   S(399, 908),    S(447, 778),    //
    S(419, 932),    S(557, 920),    S(503, 965),    S(429, 1030),   S(444, 947),    S(384, 983),    S(476, 871),    S(455, 775),    //
    S(507, 833),    S(501, 920),    S(492, 933),    S(471, 990),    S(451, 965),    S(475, 904),    S(462, 819),    S(441, 805),    //
    S(477, 855),    S(505, 842),    S(496, 884),    S(452, 928),    S(455, 943),    S(431, 905),    S(424, 802),    S(446, 726),    //
    S(511, 622),    S(525, 740),    S(488, 793),    S(435, 910),    S(459, 804),    S(469, 822),    S(474, 681),    S(443, 701),    //
    S(505, 484),    S(502, 458),    S(475, 644),    S(494, 716),    S(445, 767),    S(514, 644),    S(485, 720),    S(434, 718),    //
    S(361, 705),    S(328, 470),    S(429, 455),    S(457, 560),    S(498, 650),    S(536, 543),    S(506, 603),    S(445, 658),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(387, -693),   S(194, -105),   S(4, -33),      S(-130, 43),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(331, -153),   S(22, 129),     S(-120, 164),   S(295, 65),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-47, 55),     S(73, 173),     S(117, 128),    S(236, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-281, 84),    S(-43, 145),    S(101, 140),    S(104, 93),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-240, 16),    S(-90, 79),     S(-32, 105),    S(-78, 138),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-198, -22),   S(0, 13),       S(-87, 85),     S(-135, 136),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(21, -87),     S(60, -29),     S(-56, 51),     S(-168, 114),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-77, -158),   S(13, -120),    S(-126, -81),   S(-87, -99),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// Average batch loss: 0.0737834
// clang-format on

}
