#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(175, 180);
inline const PParam KNIGHT_MAT = S(808, 689);
inline const PParam BISHOP_MAT = S(783, 564);
inline const PParam ROOK_MAT   = S(731, 719);
inline const PParam QUEEN_MAT  = S(1625, 1230);
inline const PParam TEMPO_VAL  = S(34, 15);

inline const PParam BISHOP_PAIR_VAL  = S(79, 190);
inline const PParam DOUBLED_PAWN_VAL = S(-49, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, 0);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(53, 25), S(80, 70), S(185, 145), S(543, 510), S(982, 1112),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(46, 44), S(48, 20), S(54, 35), S(102, 106), S(565, -92),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(3, 1), S(-21, 33), S(-27, 82), S(45, 129), S(77, 224), S(175, 328),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-85, 8), S(24, 55), S(79, 149), S(129, 175), S(177, 198), S(197, 241), S(230, 235), S(254, 235), S(308, 151),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(35, 8), S(85, 111), S(145, 178), S(158, 234), S(195, 265), S(209, 287), S(232, 298), S(237, 311), S(243, 320), S(244, 317), S(274, 302), S(316, 254), S(352, 247), S(412, 226),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(212, 214), S(307, 454), S(355, 532), S(376, 523), S(387, 563), S(403, 582), S(422, 586), S(449, 585), S(473, 595), S(502, 599), S(527, 600), S(539, 605), S(584, 591), S(576, 589), S(666, 502),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(0, 0), S(629, 270), S(812, 560), S(844, 866), S(871, 925), S(922, 927), S(888, 1118), S(909, 1089), S(925, 1121), S(926, 1147), S(940, 1156), S(941, 1190), S(963, 1173), S(977, 1170), S(986, 1171), S(1005, 1156), S(993, 1170), S(1022, 1123), S(1039, 1110), S(1084, 1036), S(1135, 980), S(1193, 886), S(1287, 812), S(1408, 690), S(1335, 697), S(1400, 712), S(1111, 769), S(1012, 786),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(381, 352), S(77, -33), S(13, 8), S(14, 35), S(-5, 25), S(-32, 9), S(-11, 15), S(-2, -15), S(44, -135),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(85, -34), S(154, -86),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(17, 5), S(123, -37),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(64, -60), S(79, -72), S(125, -69), S(116, -109),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-66, 69), S(-107, 113), S(-42, 56), S(88, -6), S(285, -112),
};

inline const PParam PAWN_THREAT_KNIGHT = S(180, 70);
inline const PParam PAWN_THREAT_BISHOP = S(161, 61);
inline const PParam PAWN_THREAT_ROOK   = S(138, 50);
inline const PParam PAWN_THREAT_QUEEN  = S(112, -60);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-121, 430),   S(0, 444),      S(154, 377),    S(306, 166),    S(248, 186),    S(271, 268),    S(145, 319),    S(201, 302),    //
    S(123, 257),    S(299, 278),    S(225, 200),    S(252, 103),    S(178, 101),    S(128, 175),    S(81, 254),     S(55, 250),     //
    S(63, 193),     S(86, 196),     S(80, 153),     S(74, 120),     S(59, 121),     S(15, 124),     S(0, 195),      S(-23, 215),    //
    S(73, 116),     S(94, 153),     S(60, 108),     S(62, 106),     S(42, 98),      S(10, 120),     S(-30, 189),    S(-45, 171),    //
    S(76, 85),      S(142, 87),     S(81, 127),     S(21, 140),     S(32, 118),     S(-21, 124),    S(-25, 151),    S(-61, 153),    //
    S(82, 83),      S(236, 85),     S(155, 124),    S(55, 164),     S(36, 111),     S(12, 130),     S(-2, 174),     S(-39, 158),    //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-375, -38),   S(-59, 34),     S(-436, 382),   S(50, 130),     S(-295, 245),   S(-268, 250),   S(-349, 78),    S(-521, 170),   //
    S(159, 63),     S(187, 134),    S(357, -9),     S(136, 150),    S(213, 105),    S(176, 71),     S(56, 104),     S(110, 40),     //
    S(116, 104),    S(112, 183),    S(311, 129),    S(208, 168),    S(261, 122),    S(129, 144),    S(150, 96),     S(16, 88),      //
    S(194, 123),    S(113, 176),    S(168, 176),    S(138, 198),    S(156, 156),    S(149, 162),    S(78, 105),     S(90, 123),     //
    S(161, 102),    S(180, 108),    S(151, 156),    S(115, 145),    S(116, 159),    S(125, 162),    S(86, 104),     S(101, 14),     //
    S(62, 53),      S(100, 44),     S(77, 55),      S(101, 125),    S(120, 124),    S(36, 78),      S(48, 66),      S(-1, 66),      //
    S(84, 160),     S(115, 48),     S(67, 55),      S(57, 83),      S(50, 76),      S(36, 42),      S(49, 21),      S(-52, -27),    //
    S(30, 59),      S(69, 61),      S(128, -25),    S(104, 49),     S(137, 35),     S(79, -69),     S(20, 33),      S(-83, 13),     //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(4, 263),      S(9, 192),      S(-473, 286),   S(-174, 275),   S(-229, 293),   S(-269, 289),   S(79, 231),     S(43, 215),     //
    S(108, 115),    S(136, 218),    S(122, 213),    S(180, 155),    S(142, 184),    S(107, 211),    S(110, 191),    S(25, 213),     //
    S(112, 228),    S(170, 228),    S(385, 184),    S(238, 187),    S(193, 196),    S(133, 239),    S(229, 189),    S(84, 249),     //
    S(107, 185),    S(154, 217),    S(237, 194),    S(236, 205),    S(237, 215),    S(154, 233),    S(160, 197),    S(53, 218),     //
    S(119, 137),    S(127, 200),    S(137, 202),    S(189, 210),    S(191, 241),    S(109, 237),    S(130, 168),    S(120, 103),    //
    S(153, 126),    S(185, 162),    S(187, 164),    S(108, 217),    S(105, 225),    S(99, 233),     S(157, 170),    S(130, 109),    //
    S(108, 107),    S(184, 135),    S(131, 137),    S(105, 183),    S(97, 152),     S(137, 132),    S(75, 176),     S(153, 50),     //
    S(140, 144),    S(101, 166),    S(95, 176),     S(99, 122),     S(83, 124),     S(104, 163),    S(118, 94),     S(38, 174),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(524, 472),    S(575, 484),    S(514, 517),    S(476, 535),    S(514, 499),    S(472, 497),    S(493, 497),    S(499, 499),    //
    S(527, 514),    S(579, 505),    S(641, 487),    S(571, 532),    S(559, 533),    S(478, 547),    S(447, 543),    S(468, 533),    //
    S(452, 513),    S(698, 456),    S(654, 463),    S(675, 439),    S(575, 483),    S(487, 513),    S(544, 481),    S(394, 531),    //
    S(421, 492),    S(467, 492),    S(488, 488),    S(530, 434),    S(496, 468),    S(439, 520),    S(416, 514),    S(337, 508),    //
    S(285, 458),    S(409, 450),    S(396, 465),    S(390, 469),    S(393, 460),    S(356, 519),    S(310, 520),    S(288, 496),    //
    S(295, 446),    S(409, 365),    S(387, 407),    S(348, 429),    S(385, 406),    S(292, 470),    S(299, 449),    S(299, 434),    //
    S(237, 461),    S(321, 397),    S(368, 385),    S(372, 401),    S(353, 419),    S(346, 418),    S(292, 408),    S(289, 407),    //
    S(279, 447),    S(308, 455),    S(352, 416),    S(388, 402),    S(375, 419),    S(367, 416),    S(351, 403),    S(321, 422),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(792, 780),    S(808, 752),    S(852, 746),    S(632, 947),    S(708, 855),    S(656, 882),    S(739, 793),    S(688, 772),    //
    S(784, 802),    S(612, 997),    S(643, 1050),   S(604, 1013),   S(600, 995),    S(532, 1037),   S(607, 920),    S(670, 799),    //
    S(663, 919),    S(787, 908),    S(744, 949),    S(654, 1035),   S(655, 962),    S(583, 1014),   S(683, 890),    S(663, 795),    //
    S(729, 842),    S(698, 929),    S(705, 938),    S(669, 1013),   S(653, 1001),   S(657, 925),    S(666, 855),    S(645, 843),    //
    S(701, 874),    S(718, 857),    S(695, 908),    S(656, 976),    S(639, 984),    S(637, 942),    S(643, 840),    S(648, 773),    //
    S(724, 650),    S(724, 764),    S(702, 858),    S(619, 930),    S(668, 851),    S(651, 870),    S(689, 743),    S(660, 741),    //
    S(726, 525),    S(698, 500),    S(680, 681),    S(696, 769),    S(650, 813),    S(711, 671),    S(685, 766),    S(645, 762),    //
    S(579, 723),    S(563, 481),    S(631, 514),    S(665, 612),    S(698, 695),    S(723, 592),    S(705, 635),    S(652, 728),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(106, -552),   S(161, -53),    S(21, 0),       S(-66, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(320, -119),   S(53, 157),     S(-53, 187),    S(316, 94),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-12, 74),     S(104, 191),    S(150, 154),    S(257, 81),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-252, 105),   S(-7, 156),     S(127, 153),    S(109, 112),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-210, 41),    S(-45, 111),    S(14, 116),     S(-31, 158),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-157, 2),     S(50, 33),      S(-54, 101),    S(-98, 144),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(60, -76),     S(96, -4),      S(-18, 65),     S(-134, 125),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-51, -138),   S(52, -96),     S(-78, -54),    S(-46, -82),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
