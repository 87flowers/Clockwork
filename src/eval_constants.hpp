#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(286, 452);
inline const PParam KNIGHT_MAT = S(990, 991);
inline const PParam BISHOP_MAT = S(1015, 1063);
inline const PParam ROOK_MAT   = S(1518, 1806);
inline const PParam QUEEN_MAT  = S(3322, 3288);
inline const PParam TEMPO_VAL  = S(34, 16);

inline const PParam BISHOP_PAIR_VAL  = S(79, 193);
inline const PParam DOUBLED_PAWN_VAL = S(-49, -79);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(54, 25), S(80, 71), S(184, 150), S(509, 554), S(1763, 1463),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(45, 46), S(49, 21), S(55, 36), S(100, 110), S(638, -126),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(4, 0), S(-20, 33), S(-27, 82), S(45, 131), S(71, 233), S(34, 33),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-207, -168), S(-97, -123), S(-42, -28), S(8, -2), S(56, 18), S(76, 61), S(110, 56), S(133, 55), S(188, -28),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-117, -288), S(-69, -184), S(-8, -116), S(4, -60), S(41, -29), S(56, -6), S(77, 4), S(84, 17), S(89, 26), S(91, 23), S(119, 8), S(162, -40), S(198, -46), S(258, -66),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-203, -319), S(-84, -118), S(-36, -42), S(-14, -50), S(-3, -10), S(12, 8), S(31, 13), S(57, 11), S(82, 21), S(111, 26), S(136, 28), S(149, 32), S(193, 19), S(185, 17), S(276, -70),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(66, 101), S(-634, 529), S(-229, -396), S(-160, -247), S(-126, -222), S(-78, -210), S(-113, -15), S(-93, -43), S(-78, -8), S(-77, 17), S(-64, 29), S(-64, 65), S(-43, 50), S(-30, 50), S(-23, 55), S(-6, 43), S(-21, 64), S(3, 23), S(14, 20), S(50, -42), S(87, -81), S(103, -135), S(226, -234), S(407, -398), S(386, -422), S(941, -700), S(721, -650), S(1370, -990),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(394, 813), S(82, 444), S(18, 486), S(19, 513), S(1, 502), S(-25, 485), S(-4, 490), S(5, 459), S(54, 337),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -37), S(157, -90),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(18, 3), S(126, -39),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(66, -63), S(84, -78), S(134, -77), S(135, -122),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-50, 33), S(-73, 52), S(9, -28), S(169, -120), S(441, -284),
};

inline const PParam PAWN_THREAT_KNIGHT = S(179, 73);
inline const PParam PAWN_THREAT_BISHOP = S(162, 65);
inline const PParam PAWN_THREAT_ROOK   = S(136, 52);
inline const PParam PAWN_THREAT_QUEEN  = S(110, -56);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-115, 488),   S(7, 502),      S(172, 429),    S(334, 208),    S(274, 230),    S(298, 314),    S(169, 367),    S(222, 353),    //
    S(12, -2),      S(186, 20),     S(116, -61),    S(146, -163),   S(71, -165),    S(20, -89),     S(-28, -7),     S(-55, -11),    //
    S(-48, -66),    S(-25, -63),    S(-30, -107),   S(-36, -141),   S(-52, -139),   S(-95, -139),   S(-110, -66),   S(-135, -45),   //
    S(-38, -144),   S(-16, -107),   S(-49, -151),   S(-49, -154),   S(-69, -164),   S(-100, -141),  S(-142, -71),   S(-157, -90),   //
    S(-35, -177),   S(31, -172),    S(-29, -133),   S(-88, -120),   S(-79, -142),   S(-132, -137),  S(-137, -109),  S(-173, -110),  //
    S(-28, -180),   S(126, -176),   S(45, -137),    S(-55, -96),    S(-74, -149),   S(-98, -131),   S(-114, -87),   S(-151, -104),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-428, -146),  S(-96, -62),    S(-535, 321),   S(-13, 56),     S(-358, 168),   S(-343, 178),   S(-427, 2),     S(-580, 72),    //
    S(97, -15),     S(123, 59),     S(296, -86),    S(70, 78),      S(148, 33),     S(111, -3),     S(-8, 28),      S(47, -40),     //
    S(52, 27),      S(44, 115),     S(247, 59),     S(142, 98),     S(197, 50),     S(66, 69),      S(86, 21),      S(-47, 11),     //
    S(129, 49),     S(47, 105),     S(104, 104),    S(72, 128),     S(93, 83),      S(84, 89),      S(14, 31),      S(26, 47),      //
    S(96, 27),      S(116, 35),     S(85, 85),      S(52, 72),      S(52, 87),      S(60, 89),      S(21, 29),      S(38, -63),     //
    S(-1, -22),     S(34, -28),     S(12, -17),     S(37, 53),      S(56, 51),      S(-27, 3),      S(-15, -9),     S(-64, -10),    //
    S(20, 83),      S(51, -27),     S(4, -17),      S(-6, 9),       S(-13, 1),      S(-28, -32),    S(-12, -58),    S(-114, -109),  //
    S(-34, -15),    S(6, -17),      S(64, -101),    S(41, -25),     S(73, -41),     S(15, -146),    S(-41, -46),    S(-157, -57),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-81, 109),    S(-58, 30),     S(-569, 134),   S(-264, 120),   S(-320, 139),   S(-369, 137),   S(-5, 76),      S(-38, 57),     //
    S(25, -43),     S(53, 62),      S(38, 57),      S(95, 0),       S(61, 26),      S(24, 54),      S(28, 35),      S(-57, 55),     //
    S(30, 72),      S(87, 73),      S(304, 29),     S(156, 31),     S(110, 40),     S(50, 84),      S(147, 32),     S(2, 92),       //
    S(26, 28),      S(72, 61),      S(155, 39),     S(155, 50),     S(156, 59),     S(72, 79),      S(79, 40),      S(-28, 60),     //
    S(38, -19),     S(45, 45),      S(55, 46),      S(108, 54),     S(110, 86),     S(28, 80),      S(49, 12),      S(39, -55),     //
    S(72, -31),     S(102, 7),      S(104, 9),      S(26, 61),      S(23, 68),      S(17, 77),      S(76, 13),      S(49, -48),     //
    S(27, -50),     S(102, -20),    S(50, -18),     S(23, 27),      S(15, -4),      S(55, -25),     S(-4, 18),      S(72, -110),    //
    S(59, -14),     S(22, 6),       S(13, 19),      S(18, -35),     S(2, -32),      S(22, 4),       S(38, -66),     S(-44, 17),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(121, 33),     S(172, 45),     S(114, 77),     S(74, 97),      S(110, 60),     S(70, 57),      S(88, 59),      S(96, 60),      //
    S(123, 76),     S(175, 67),     S(237, 48),     S(166, 94),     S(153, 96),     S(72, 110),     S(40, 107),     S(62, 96),      //
    S(49, 73),      S(295, 17),     S(252, 24),     S(273, -1),     S(172, 43),     S(83, 74),      S(141, 41),     S(-9, 92),      //
    S(17, 52),      S(62, 53),      S(84, 50),      S(127, -6),     S(92, 27),      S(35, 80),      S(12, 75),      S(-66, 67),     //
    S(-117, 17),    S(6, 10),       S(-7, 26),      S(-13, 29),     S(-9, 19),      S(-47, 79),     S(-93, 79),     S(-115, 56),    //
    S(-109, 6),     S(5, -74),      S(-17, -32),    S(-55, -10),    S(-17, -34),    S(-111, 30),    S(-104, 9),     S(-105, -6),    //
    S(-167, 21),    S(-82, -42),    S(-34, -54),    S(-31, -39),    S(-49, -20),    S(-57, -22),    S(-112, -32),   S(-114, -34),   //
    S(-122, 3),     S(-94, 13),     S(-50, -25),    S(-14, -40),    S(-26, -21),    S(-35, -26),    S(-52, -39),    S(-81, -20),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(64, 80),      S(59, 71),      S(104, 53),     S(-100, 240),   S(-3, 126),     S(-55, 153),    S(43, 47),      S(-3, 24),      //
    S(95, 55),      S(-76, 248),    S(-61, 322),    S(-120, 305),   S(-88, 243),    S(-144, 269),   S(-62, 138),    S(-4, 24),      //
    S(-35, 183),    S(94, 163),     S(50, 205),     S(-29, 279),    S(-19, 192),    S(-83, 228),    S(15, 102),     S(-7, 10),      //
    S(49, 79),      S(24, 161),     S(28, 174),     S(-3, 239),     S(-13, 216),    S(-7, 135),     S(7, 52),       S(-18, 46),     //
    S(30, 98),      S(51, 75),      S(29, 126),     S(-5, 181),     S(-19, 183),    S(-22, 141),    S(-17, 43),     S(-11, -29),    //
    S(58, -140),    S(60, -25),     S(39, 63),      S(-38, 128),    S(9, 47),       S(-5, 63),      S(29, -59),     S(-1, -56),     //
    S(63, -267),    S(41, -306),    S(21, -122),    S(39, -39),     S(-5, 3),       S(54, -136),    S(28, -42),     S(-13, -38),    //
    S(-85, -69),    S(-85, -332),   S(-23, -297),   S(12, -202),    S(41, -116),    S(68, -221),    S(47, -170),    S(-5, -76),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(468, -733),   S(258, -122),   S(10, -35),     S(-111, 39),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(366, -171),   S(48, 126),     S(-48, 154),    S(320, 58),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(2, 34),       S(120, 155),    S(172, 116),    S(273, 44),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-231, 64),    S(7, 120),      S(144, 115),    S(125, 74),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-190, 1),     S(-27, 72),     S(30, 78),      S(-19, 121),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-136, -38),   S(71, -8),      S(-36, 61),     S(-83, 105),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(83, -120),    S(118, -47),    S(2, 23),       S(-116, 85),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-28, -183),   S(75, -140),    S(-57, -97),    S(-25, -126),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
